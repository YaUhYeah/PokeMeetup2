This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-31T05:19:39.912Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Directory Structure
================================================================
main/java/org/discord/context/ServerGameContext.java
main/java/org/discord/DeploymentHelper.java
main/java/org/discord/files/ServerFileDelegate.java
main/java/org/discord/GameServer.java
main/java/org/discord/PluginManager.java
main/java/org/discord/ServerBlockManager.java
main/java/org/discord/ServerLauncher.java
main/java/org/discord/ServerWorldObjectManager.java
main/java/org/discord/utils/BiomeData.java
main/java/org/discord/utils/ServerBiomeManager.java
main/java/org/discord/utils/ServerWorldManager.java

================================================================
Files
================================================================

================
File: main/java/org/discord/context/ServerGameContext.java
================
package org.discord.context;

import io.github.pokemeetup.multiplayer.server.ServerStorageSystem;
import org.discord.ServerWorldObjectManager;
import org.discord.utils.ServerWorldManager;

public final class ServerGameContext {
    private static ServerGameContext instance;
    private final ServerWorldManager worldManager;
    private final ServerStorageSystem storageSystem;
    private final ServerWorldObjectManager worldObjectManager;

    private ServerGameContext(ServerWorldManager worldManager,
                              ServerStorageSystem storageSystem,
                              ServerWorldObjectManager worldObjectManager) {
        this.worldManager = worldManager;
        this.storageSystem = storageSystem;
        this.worldObjectManager = worldObjectManager;
    }

    public static void init(ServerWorldManager worldManager,
                            ServerStorageSystem storageSystem,
                            ServerWorldObjectManager worldObjectManager) {
        if (instance != null) {
            throw new IllegalStateException("ServerGameContext already initialized!");
        }
        instance = new ServerGameContext(worldManager, storageSystem, worldObjectManager);
    }

    public static ServerGameContext get() {
        if (instance == null) {
            throw new IllegalStateException("ServerGameContext not initialized yet!");
        }
        return instance;
    }

    public ServerStorageSystem getStorageSystem() {
        return storageSystem;
    }

    public ServerWorldManager getWorldManager() {
        return worldManager;
    }

    public ServerWorldObjectManager getWorldObjectManager() {
        return worldObjectManager;
    }

    public void dispose() {
        if (worldManager != null) {
            worldManager.shutdown();
        }
        if (worldObjectManager != null) {
            worldObjectManager.cleanup();
        }
        instance = null;
    }
}

================
File: main/java/org/discord/DeploymentHelper.java
================
package org.discord;

import com.badlogic.gdx.utils.Json;
import io.github.pokemeetup.multiplayer.server.config.ServerConnectionConfig;
import io.github.pokemeetup.system.gameplay.overworld.biomes.BiomeType;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

public class DeploymentHelper {
    public static void createServerDeployment(Path deploymentDir) throws IOException {
        System.out.println("Creating server deployment in: " + deploymentDir.toAbsolutePath());

        // Create directory structure
        createDirectory(deploymentDir);
        createDirectory(Paths.get(deploymentDir.toString(), "config"));
        createDirectory(Paths.get(deploymentDir.toString(), "plugins"));
        createDirectory(Paths.get(deploymentDir.toString(), "worlds"));
        createDirectory(Paths.get(deploymentDir.toString(), "logs"));
        createDirectory(Paths.get(deploymentDir.toString(), "server/data"));
       // Check if we're running from JAR or development environment
        Path serverJar;
        if (isRunningFromJar()) {
            // When running from JAR, use the current JAR
            serverJar = getCurrentJarPath();
            System.out.println("Running from JAR: " + serverJar);
        } else {
            // In development, look for the JAR in build directory
            serverJar = Paths.get("server.jar");
            System.out.println("Running in development mode, looking for: " + serverJar);
        }

        if (Files.exists(serverJar)) {
            Files.copy(serverJar, Paths.get(deploymentDir.toString(), "server.jar"));
            System.out.println("Copied server JAR successfully");
        } else {
            System.out.println("Warning: Server JAR not found at: " + serverJar);
            // Continue anyway as we might be in development mode
        }

        // Create configurations
        createDefaultConfig(deploymentDir);

        // Create start scripts
        createStartScripts(deploymentDir);

        // Make shell script executable on Unix
        Path startSh = Paths.get(deploymentDir.toString(), "start.sh");
        if (Files.exists(startSh)) {
            startSh.toFile().setExecutable(true);
        }

        // Create README
        createReadme(deploymentDir);

        System.out.println("Server deployment completed successfully");
    }

    private static boolean isRunningFromJar() {
        String className = DeploymentHelper.class.getName().replace('.', '/');
        String classJar = DeploymentHelper.class.getResource("/" + className + ".class").toString();
        return classJar.startsWith("jar:");
    }

    private static Path getCurrentJarPath() {
        try {
            return Paths.get(DeploymentHelper.class.getProtectionDomain().getCodeSource().getLocation().toURI());
        } catch (Exception e) {
            return Paths.get("server.jar");
        }
    }

    private static void createDirectory(Path dir) throws IOException {
        if (!Files.exists(dir)) {
            Files.createDirectories(dir);
            System.out.println("Created directory: " + dir);
        }
    }




    // Helper method to create both start scripts
    private static void createStartScripts(Path deploymentDir) throws IOException {
        // Create Windows batch file
        try {
            createWindowsScript(deploymentDir);
            System.out.println("Created start.bat successfully");
        } catch (IOException e) {
            throw new IOException("Failed to create start.bat: " + e.getMessage());
        }

        // Create Unix shell script
        try {
            createUnixScript(deploymentDir);
            System.out.println("Created start.sh successfully");
        } catch (IOException e) {
            throw new IOException("Failed to create start.sh: " + e.getMessage());
        }
    }

    // Create Windows batch script
    private static void createWindowsScript(Path deploymentDir) throws IOException {
        String batScript =
            "@echo off\n" +
                "setlocal enabledelayedexpansion\n\n" +
                ":: Set Java path if needed\n" +
                "set JAVA_HOME=\n" +
                "if defined JAVA_HOME (\n" +
                "    set JAVA=\"%JAVA_HOME%/bin/java\"\n" +
                ") else (\n" +
                "    set JAVA=java\n" +
                ")\n\n" +
                ":: Set memory options\n" +
                "set MIN_MEMORY=1G\n" +
                "set MAX_MEMORY=4G\n\n" +
                ":: Start server\n" +
                "echo Starting Pokemon Meetup Server...\n" +
                "%JAVA% -Xms%MIN_MEMORY% -Xmx%MAX_MEMORY% -jar server.jar\n" +
                "pause\n";

        Path batPath = Paths.get(deploymentDir.toString(), "start.bat");
        Files.write(batPath, batScript.getBytes(StandardCharsets.UTF_8));
    }

    // Create Unix shell script
    private static void createUnixScript(Path deploymentDir) throws IOException {
        String shScript =
            "#!/bin/bash\n\n" +
                "# Set Java path if needed\n" +
                "if [ -n \"$JAVA_HOME\" ]; then\n" +
                "    JAVA=\"$JAVA_HOME/bin/java\"\n" +
                "else\n" +
                "    JAVA=\"java\"\n" +
                "fi\n\n" +
                "# Set memory options\n" +
                "MIN_MEMORY=\"1G\"\n" +
                "MAX_MEMORY=\"4G\"\n\n" +
                "# Start server\n" +
                "echo \"Starting Pokemon Meetup Server...\"\n" +
                "$JAVA -Xms$MIN_MEMORY -Xmx$MAX_MEMORY -jar server.jar\n";

        Path shPath = Paths.get(deploymentDir.toString(), "start.sh");
        Files.write(shPath, shScript.getBytes(StandardCharsets.UTF_8));

        // Make shell script executable
        try {
            shPath.toFile().setExecutable(true);
        } catch (SecurityException e) {
            System.out.println("Warning: Could not make start.sh executable: " + e.getMessage());
        }
    }

    private static void createDefaultConfig(Path deploymentDir) throws IOException {
        ServerConnectionConfig config = new ServerConnectionConfig(
            "0.0.0.0",
            54555,
            54556,
            "Pokemon Meetup Server",
            true,
            100
        );

        Json json = new Json();
        Path configFile = Paths.get(deploymentDir.toString(), "config/server.json");
        Files.write(configFile, Arrays.asList(json.prettyPrint(config).split("\n")), StandardCharsets.UTF_8);
    }

    private static void createReadme(Path deploymentDir) throws IOException {
        String readme =
            "Pokemon Meetup Server\n" +
                "====================\n\n" +
                "Quick Start:\n" +
                "1. Edit config/server.json to configure your server\n" +
                "2. On Windows: Run start.bat\n" +
                "   On Linux/Mac: Run ./start.sh\n" +
                "3. Server will create necessary directories on first run\n\n" +
                "Plugins:\n" +
                "- Place plugin .jar files in the plugins directory\n" +
                "- Server will load plugins automatically on startup\n\n" +
                "Configuration:\n" +
                "- Server settings: config/server.json\n" +
                "- Plugin configs: config/<plugin-id>.json\n\n" +
                "Logs:\n" +
                "- Server logs are stored in the logs directory\n\n" +
                "Support:\n" +
                "- Issues: https://github.com/yourusername/pokemon-meetup/issues\n" +
                "- Wiki: https://github.com/yourusername/pokemon-meetup/wiki\n";

        Path readmeFile = Paths.get(deploymentDir.toString(), "README.md");
        Files.write(readmeFile, Arrays.asList(readme.split("\n")), StandardCharsets.UTF_8);
    }

}

================
File: main/java/org/discord/files/ServerFileDelegate.java
================
package org.discord.files;

import io.github.pokemeetup.FileSystemDelegate;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.logging.Logger;

public class ServerFileDelegate implements FileSystemDelegate {
    private static final Logger logger = Logger.getLogger(ServerFileDelegate.class.getName());
    private final String basePath;
    @Override
    public void moveFile(String sourcePath, String destinationPath) throws IOException {
        File sourceFile = new File(sourcePath);
        File destFile = new File(destinationPath);

        if (!sourceFile.exists()) {
            throw new FileNotFoundException("Source file does not exist: " + sourcePath);
        }

        boolean success = sourceFile.renameTo(destFile);
        if (!success) {
            throw new IOException("Failed to move file from " + sourcePath + " to " + destinationPath);
        }
    }
    public ServerFileDelegate() {
        // Use working directory as base path
        this.basePath = System.getProperty("user.dir");
        logger.info("Initialized server file system with base path: " + basePath);
    }

    private Path getPath(String path) {
        return Paths.get(basePath, path);
    }

    @Override
    public boolean exists(String path) {
        return Files.exists(getPath(path));
    }

    @Override
    public void createDirectory(String path) {
        try {
            Files.createDirectories(getPath(path));
        } catch (IOException e) {
            logger.severe("Failed to create directory: " + path);
            throw new RuntimeException("Failed to create directory: " + path, e);
        }
    }

    @Override
    public void writeString(String path, String content) throws IOException {
        Path filePath = getPath(path);
        Files.createDirectories(filePath.getParent());
        Files.writeString(filePath, content, StandardCharsets.UTF_8);
    }

    @Override
    public String readString(String path) throws IOException {
        return Files.readString(getPath(path), StandardCharsets.UTF_8);
    }

    @Override
    public void deleteFile(String path) {
        try {
            Files.deleteIfExists(getPath(path));
        } catch (IOException e) {
            logger.severe("Failed to delete file: " + path);
            throw new RuntimeException("Failed to delete file: " + path, e);
        }
    }

    @Override
    public void deleteDirectory(String path) {
        try {
            Files.walk(getPath(path))
                .sorted((a, b) -> -a.compareTo(b))
                .forEach(p -> {
                    try {
                        Files.delete(p);
                    } catch (IOException e) {
                        logger.severe("Failed to delete: " + p);
                    }
                });
        } catch (IOException e) {
            logger.severe("Failed to delete directory: " + path);
            throw new RuntimeException("Failed to delete directory: " + path, e);
        }
    }

    @Override
    public boolean isDirectory(String path) {
        return Files.isDirectory(getPath(path));
    }

    @Override
    public String[] list(String path) {
        try {
            return Files.list(getPath(path))
                .map(p -> p.getFileName().toString())
                .toArray(String[]::new);
        } catch (IOException e) {
            logger.severe("Failed to list directory: " + path);
            return new String[0];
        }
    }

    @Override
    public void copyFile(String sourcePath, String destinationPath) throws IOException {
        Files.copy(getPath(sourcePath), getPath(destinationPath),
            StandardCopyOption.REPLACE_EXISTING);
    }

    @Override
    public InputStream openInputStream(String path) throws IOException {
        return Files.newInputStream(getPath(path));
    }

    @Override
    public OutputStream openOutputStream(String path) throws IOException {
        Path filePath = getPath(path);
        Files.createDirectories(filePath.getParent());
        return Files.newOutputStream(filePath);
    }
}

================
File: main/java/org/discord/GameServer.java
================
package org.discord;

import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.Output;
import com.esotericsoftware.kryonet.FrameworkMessage;
import com.esotericsoftware.kryonet.Server;
import com.esotericsoftware.kryonet.Connection;
import com.esotericsoftware.kryonet.Listener;
import io.github.pokemeetup.CreatureCaptureGame;
import io.github.pokemeetup.blocks.PlaceableBlock;
import io.github.pokemeetup.managers.BiomeManager;
import io.github.pokemeetup.managers.BiomeTransitionResult;
import io.github.pokemeetup.managers.DatabaseManager;
import io.github.pokemeetup.multiplayer.PlayerManager;
import io.github.pokemeetup.multiplayer.ServerPlayer;
import io.github.pokemeetup.multiplayer.network.NetworkProtocol;
import io.github.pokemeetup.system.data.*;
import io.github.pokemeetup.multiplayer.server.config.ServerConnectionConfig;
import io.github.pokemeetup.pokemon.WildPokemon;
import io.github.pokemeetup.system.gameplay.inventory.ItemManager;
import io.github.pokemeetup.system.gameplay.overworld.Chunk;
import io.github.pokemeetup.system.gameplay.overworld.World;
import io.github.pokemeetup.system.gameplay.overworld.WorldObject;
import io.github.pokemeetup.system.gameplay.overworld.biomes.Biome;
import io.github.pokemeetup.system.gameplay.overworld.biomes.BiomeType;
import io.github.pokemeetup.utils.GameLogger;
import io.github.pokemeetup.utils.PasswordUtils;
import io.github.pokemeetup.utils.textures.TextureManager;
import org.discord.context.ServerGameContext;
import org.discord.utils.BiomeData;
import org.discord.utils.ServerBiomeManager;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.Collectors;
import java.util.zip.GZIPOutputStream;

import static io.github.pokemeetup.CreatureCaptureGame.MULTIPLAYER_WORLD_NAME;
import static io.github.pokemeetup.system.gameplay.overworld.World.CHUNK_SIZE;
import static io.github.pokemeetup.system.gameplay.overworld.WorldObject.WorldObjectManager.MAX_POKEBALLS_PER_CHUNK;
import static io.github.pokemeetup.system.gameplay.overworld.WorldObject.WorldObjectManager.POKEBALL_SPAWN_CHANCE;

public class GameServer {

    private static final int WRITE_BUFFER = 32768; // 32KB
    private static final int OBJECT_BUFFER = 32768;
    private static final int SCHEDULER_POOL_SIZE = 3;
    private static final long AUTH_TIMEOUT = 10000;
    private static final long SAVE_INTERVAL = 300000;
    private final ServerWorldObjectManager worldObjectManager;
    private final Server networkServer;
    private final ServerConnectionConfig config;
    private final DatabaseManager databaseManager;
    private final ConcurrentHashMap<Integer, String> connectedPlayers;
    private final PlayerManager playerManager;
    private final ScheduledExecutorService scheduler;
    private final Map<String, Integer> activeUserConnections = new ConcurrentHashMap<>();
    private final Map<String, ServerPlayer> activePlayers = new ConcurrentHashMap<>();
    private final Map<String, ConnectionInfo> activeConnections = new ConcurrentHashMap<>();
    private final Map<String, Long> recentDisconnects = new ConcurrentHashMap<>();
    private final WorldData worldData;
    private final PluginManager pluginManager;
    private final ServerBlockManager blockManager;
    private volatile boolean running;


    public GameServer(ServerConnectionConfig config) {
        this.scheduler = Executors.newScheduledThreadPool(SCHEDULER_POOL_SIZE, r -> {
            Thread thread = new Thread(r, "GameServer-Scheduler");
            thread.setDaemon(true);
            return thread;
        });
        ItemManager.setServerMode(true);
        ItemManager.initialize(null);
        this.config = config;
        this.networkServer = new Server(WRITE_BUFFER, OBJECT_BUFFER);
        NetworkProtocol.registerClasses(networkServer.getKryo());
        scheduler.scheduleAtFixedRate(() -> {
            try {
                ServerGameContext.get().getStorageSystem().getPlayerDataManager().flush();
            } catch (Exception e) {
                GameLogger.error("Scheduled player data flush failed: " + e.getMessage());
            }
        }, 300000, 300000, TimeUnit.MILLISECONDS);

        networkServer.getKryo().setReferences(false);

        this.worldObjectManager = new ServerWorldObjectManager();

        this.databaseManager = new DatabaseManager();
        this.connectedPlayers = new ConcurrentHashMap<>();
        this.playerManager = new PlayerManager(ServerGameContext.get().getStorageSystem());


        try {
            this.worldData = initializeMultiplayerWorld();
            this.blockManager = new ServerBlockManager();
            setupNetworkListener();
            this.pluginManager = new PluginManager(worldData);
        } catch (Exception e) {
            GameLogger.error("Failed to initialize game world: " + e.getMessage());
            throw new RuntimeException("Failed to initialize server world", e);
        }
    }

    private WorldData initializeMultiplayerWorld() {
        try {
            WorldData worldData = ServerGameContext.get().getWorldManager().loadWorld(MULTIPLAYER_WORLD_NAME);
            if (worldData == null) {
                // Create new WorldData
                worldData = ServerGameContext.get().getWorldManager().createWorld(
                    MULTIPLAYER_WORLD_NAME,
                    System.currentTimeMillis(),
                    0.15f,
                    0.05f
                );
                ServerGameContext.get().getWorldManager().saveWorld(worldData);
            }
            return worldData;
        } catch (Exception e) {
            GameLogger.error("Failed to initialize multiplayer world: " + e.getMessage());
            throw new RuntimeException("WorldData initialization failed", e);
        }
    }


    private void handleDisconnect(Connection connection) {
        String username = connectedPlayers.get(connection.getID());
        if (username != null) {
            GameLogger.info("Handling disconnect for user: " + username);

            synchronized (activeConnections) {
                try {


                    // Existing cleanup code...
                    recentDisconnects.put(username, System.currentTimeMillis());
                    activeConnections.remove(username);
                    cleanupPlayerSession(connection.getID(), username);

                    NetworkProtocol.PlayerLeft leftMessage = new NetworkProtocol.PlayerLeft();
                    leftMessage.username = username;
                    leftMessage.timestamp = System.currentTimeMillis();
                    networkServer.sendToAllTCP(leftMessage);

                } catch (Exception e) {
                    GameLogger.error("Error during disconnect handling: " + e.getMessage());
                }
            }
        } else {
            GameLogger.info("username null during disconnect?");
        }
    }

    public void shutdown() {
        try {
            GameLogger.info("Starting server shutdown sequence...");

            NetworkProtocol.ServerShutdown shutdownMsg = new NetworkProtocol.ServerShutdown();
            shutdownMsg.reason = "Server is shutting down";
            networkServer.sendToAllTCP(shutdownMsg);


            // Save world state if exists
            if (worldData != null) {
                try {
                    GameLogger.info("Saving world data during shutdown...");
                    worldData.setLastPlayed(System.currentTimeMillis());
                    ServerGameContext.get().getWorldManager().saveWorld(worldData);
                } catch (Exception e) {
                    GameLogger.error("Error saving world data during shutdown: " + e.getMessage());
                }
            }

            Thread.sleep(500);

            running = false;
            if (ServerGameContext.get().getWorldManager() != null) {
                ServerGameContext.get().getWorldManager().shutdown();
            }
            networkServer.stop();
            if (scheduler != null) {
                scheduler.shutdown();
                try {
                    if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {
                        scheduler.shutdownNow();
                    }
                } catch (InterruptedException e) {
                    scheduler.shutdownNow();
                }
            }

            GameLogger.info("Server shutdown completed successfully");
        } catch (Exception e) {
            GameLogger.error("Error during server shutdown: " + e.getMessage());
            if (networkServer != null) {
                networkServer.stop();
            }
        }
    }

    private void cleanupPlayerSession(int connectionId, String username) {
        synchronized (activeUserConnections) {
            activeUserConnections.remove(username);
            connectedPlayers.remove(connectionId);

        }
    }

    private void sendSuccessfulLoginResponse(Connection connection, ServerPlayer player) {
        NetworkProtocol.LoginResponse response = new NetworkProtocol.LoginResponse();
        response.success = true;
        response.username = player.getUsername();
        response.message = "Login successful";
        response.x = (int) player.getPosition().x;
        response.y = (int) player.getPosition().y;
        response.seed = worldData.getConfig().getSeed();
        response.worldTimeInMinutes = worldData.getWorldTimeInMinutes();
        response.dayLength = worldData.getDayLength();
        response.timestamp = System.currentTimeMillis();

        response.playerData = player.getData();
        connection.sendTCP(response);
    }


    private Connection findConnection(int connectionId) {
        for (Connection conn : networkServer.getConnections()) {
            if (conn.getID() == connectionId) {
                return conn;
            }
        }
        return null;
    }

    private void sendLoginFailure(Connection connection, String message) {
        NetworkProtocol.LoginResponse response = new NetworkProtocol.LoginResponse();
        response.success = false;
        response.message = message;
        response.timestamp = System.currentTimeMillis();

        try {
            connection.sendTCP(response);
            GameLogger.info("Sent login failure: " + message);
        } catch (Exception e) {
            GameLogger.error("Error sending login failure: " + e.getMessage());
        }
    }

    private void handlePlayerUpdate(Connection connection, NetworkProtocol.PlayerUpdate update) {
        try {
            String username = connectedPlayers.get(connection.getID());
            if (username == null || !username.equals(update.username)) {
                GameLogger.error("Username mismatch in player update");
                return;
            }
            ServerPlayer serverPlayer = activePlayers.get(username);
            if (serverPlayer == null) {
                GameLogger.error("No ServerPlayer instance found for: " + username);
                return;
            }

            // Update ServerPlayer's position and state
            serverPlayer.setPosition(update.x, update.y);
            serverPlayer.setDirection(update.direction);
            serverPlayer.setMoving(update.isMoving);
            // Then update persistent data
            PlayerData playerData = ServerGameContext.get().getStorageSystem()
                .getPlayerDataManager().loadPlayerData(UUID.nameUUIDFromBytes(update.username.getBytes()));

            if (playerData == null) {
                GameLogger.error("No player data found for active player: " + username);
                return;
            }

            // Update player data
            playerData.setX(update.x);
            playerData.setY(update.y);
            playerData.setDirection(update.direction);
            playerData.setMoving(update.isMoving);
            playerData.setWantsToRun(update.wantsToRun);

            if (update.inventoryItems != null) {
                playerData.setInventoryItems(Arrays.asList(update.inventoryItems));
            }
            if (update.partyPokemon != null) {
                playerData.setPartyPokemon(update.partyPokemon);
            }

            // Save to storage
            UUID playerUUID = UUID.nameUUIDFromBytes(username.getBytes());
            ServerGameContext.get().getStorageSystem()
                .getPlayerDataManager().savePlayerData(playerUUID, playerData);

            // Broadcast update to other players
            networkServer.sendToAllExceptTCP(connection.getID(), update);

        } catch (Exception e) {
            GameLogger.error("Error handling player update: " + e.getMessage());
        }
    }

    private void handlePokemonSpawn(Connection connection, NetworkProtocol.WildPokemonSpawn spawnRequest) {
        try {
            WorldData world = ServerGameContext.get().getWorldManager().loadWorld(MULTIPLAYER_WORLD_NAME);
            if (world == null) {
                GameLogger.error("Cannot spawn Pokemon: World is null");
                return;
            }

            if (!isValidSpawnPosition(spawnRequest.x, spawnRequest.y)) {
                GameLogger.error("Invalid spawn position: " + spawnRequest.x + "," + spawnRequest.y);
                return;
            }

            WildPokemon pokemon = createWildPokemon(spawnRequest);
            if (pokemon == null) {
                GameLogger.error("Failed to create Pokemon from spawn request");
                return;
            }
            // Create broadcast message
            NetworkProtocol.WildPokemonSpawn broadcastSpawn = createSpawnBroadcast(pokemon);

            // Broadcast to all clients
            try {
                networkServer.sendToAllTCP(broadcastSpawn);
                GameLogger.info("Broadcast Pokemon spawn: " + pokemon.getName() +
                    " (UUID: " + pokemon.getUuid() + ")");
            } catch (Exception e) {
                GameLogger.error("Failed to broadcast Pokemon spawn: " + e.getMessage());
                world.removeWildPokemon(pokemon.getUuid());
            }

        } catch (Exception e) {
            GameLogger.error("Error handling Pokemon spawn: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private boolean isValidSpawnPosition(float x, float y) {
        int tileX = (int) (x / World.TILE_SIZE);
        int tileY = (int) (y / World.TILE_SIZE);

        if (tileX < 0 || tileX >= World.WORLD_SIZE ||
            tileY < 0 || tileY >= World.WORLD_SIZE) {
            return false;
        }

        WorldData world = ServerGameContext.get().getWorldManager().loadWorld(MULTIPLAYER_WORLD_NAME);
        if (world == null) return false;

        return true;
    }

    private NetworkProtocol.WildPokemonSpawn createSpawnBroadcast(WildPokemon pokemon) {
        NetworkProtocol.WildPokemonSpawn broadcast = new NetworkProtocol.WildPokemonSpawn();
        broadcast.uuid = pokemon.getUuid();
        broadcast.x = pokemon.getX();
        broadcast.y = pokemon.getY();
        PokemonData pokemonData = new PokemonData();
        pokemonData.setName(pokemon.getName());
        pokemonData.setLevel(pokemon.getLevel());
        pokemonData.setPrimaryType(pokemon.getPrimaryType());
        pokemonData.setSecondaryType(pokemon.getSecondaryType());

        // Set stats
        if (pokemon.getStats() != null) {
            PokemonData.Stats stats = new PokemonData.Stats(pokemon.getStats());
            pokemonData.setStats(stats);
        }

        // Set moves
        List<PokemonData.MoveData> moves = pokemon.getMoves().stream()
            .map(PokemonData.MoveData::fromMove)
            .filter(Objects::nonNull)
            .collect(Collectors.toList());
        pokemonData.setMoves(moves);

        broadcast.data = pokemonData;
        broadcast.timestamp = System.currentTimeMillis();

        return broadcast;
    }

    private WildPokemon createWildPokemon(NetworkProtocol.WildPokemonSpawn spawnRequest) {
        try {
            WildPokemon pokemon = new WildPokemon(
                spawnRequest.data.getName(),
                spawnRequest.data.getLevel(),
                (int) spawnRequest.x,
                (int) spawnRequest.y,
                TextureManager.getOverworldSprite(spawnRequest.data.getName())
            );
            pokemon.setUuid(spawnRequest.uuid != null ? spawnRequest.uuid : UUID.randomUUID());
            pokemon.setSpawnTime(System.currentTimeMillis() / 1000L);

            return pokemon;
        } catch (Exception e) {
            GameLogger.error("Error creating WildPokemon: " + e.getMessage());
            return null;
        }
    }

    private boolean authenticateUser(String username, String password) {
        String storedHash = databaseManager.getPasswordHash(username);
        if (storedHash == null) {
            GameLogger.error("Authentication failed: Username '" + username + "' does not exist.");
            return false;
        }
        return PasswordUtils.verifyPassword(password, storedHash);
    }

    private void handleLoginRequest(Connection connection, NetworkProtocol.LoginRequest request) {
        try {
            GameLogger.info("Processing login request for: " + request.username);

            // Generate consistent UUID based on username
            UUID playerUUID = UUID.nameUUIDFromBytes(request.username.getBytes());
            GameLogger.info("Generated UUID for player: " + playerUUID);

            // Try to load existing player data first
            PlayerData playerData = ServerGameContext.get().getStorageSystem()
                .getPlayerDataManager().loadPlayerData(playerUUID);

            if (playerData == null) {
                // Only create new data if none exists
                GameLogger.info("Creating new player data for: " + request.username);
                playerData = new PlayerData(request.username);
                playerData.setX(0);
                playerData.setY(0);
                playerData.setDirection("down");
                playerData.setMoving(false);
                playerData.setInventoryItems(new ArrayList<>());
                playerData.setPartyPokemon(new ArrayList<>());

                // Save immediately and verify
                ServerGameContext.get().getStorageSystem()
                    .getPlayerDataManager().savePlayerData(playerUUID, playerData);
                ServerGameContext.get().getStorageSystem()
                    .getPlayerDataManager().flush(); // Force write to disk
            }

            // Validate authentication
            if (!authenticateUser(request.username, request.password)) {
                sendLoginFailure(connection, "Invalid credentials");
                return;
            }

            synchronized (activeConnections) {
                // Handle existing connection
                handleExistingConnection(request.username);

                // Create new connection
                ConnectionInfo newConnection = new ConnectionInfo(connection.getID());
                activeConnections.put(request.username, newConnection);
                ServerPlayer player;
                if (!activeConnections.containsKey(request.username)) {
                    player = new ServerPlayer(request.username, playerData);
                } else {
                    player = new ServerPlayer(request.username, ServerGameContext.get().getStorageSystem().getPlayerDataManager().playerCache.get(UUID.nameUUIDFromBytes(request.username.getBytes())));
                }
                activePlayers.put(request.username, player);
                // Reg ister the player
                connectedPlayers.put(connection.getID(), request.username);
                newConnection.isAuthenticated = true;

                // Send successful response
                sendSuccessfulLoginResponse(connection, player);
                NetworkProtocol.PlayerJoined joinedMsg = new NetworkProtocol.PlayerJoined();
                joinedMsg.username = request.username;
                joinedMsg.x = playerData.getX();     // or however you track player’s X
                joinedMsg.y = playerData.getY();     // similarly for Y
                joinedMsg.timestamp = System.currentTimeMillis();

                // Send to everyone (including the newly joined player)
                networkServer.sendToAllTCP(joinedMsg);

                GameLogger.info("Login successful for: " + request.username);
            }

        } catch (Exception e) {
            GameLogger.error("Login error for " + request.username + ": " + e.getMessage());
            e.printStackTrace();
            sendLoginFailure(connection, "Server error occurred");
        }
    }

    private void handleExistingConnection(String username) throws InterruptedException {
        ConnectionInfo existingConnection = activeConnections.get(username);
        if (existingConnection != null) {
            Connection oldConnection = findConnection(existingConnection.connectionId);
            if (oldConnection != null && oldConnection.isConnected()) {
                NetworkProtocol.ForceDisconnect forceDisconnect = new NetworkProtocol.ForceDisconnect();
                forceDisconnect.reason = "Logged in from another location";
                oldConnection.sendTCP(forceDisconnect);
                Thread.sleep(100);
                oldConnection.close();

                cleanupPlayerSession(existingConnection.connectionId, username);
                Thread.sleep(500);
            }
        }
    }

    public void handleChunkRequest(Connection connection, NetworkProtocol.ChunkRequest request) {
        Vector2 chunkPos = new Vector2(request.chunkX, request.chunkY);

        try {
            WorldData worldData = ServerGameContext.get().getWorldManager().loadWorld(MULTIPLAYER_WORLD_NAME);
            if (worldData == null) {
                GameLogger.error("Failed to load world data for chunk request");
                return;
            }

            Chunk chunk = ServerGameContext.get().getWorldManager()
                .loadChunk(MULTIPLAYER_WORLD_NAME, request.chunkX, request.chunkY);

            if (chunk == null) {
                GameLogger.error("Failed to load chunk at " + chunkPos);
                return;
            }

            NetworkProtocol.ChunkData chunkData = new NetworkProtocol.ChunkData();
            chunkData.chunkX = request.chunkX;
            chunkData.chunkY = request.chunkY;
            chunkData.primaryBiomeType = chunk.getBiome().getType();
            chunkData.tileData = chunk.getTileData();
            chunkData.blockData = chunk.getBlockDataForSave();
            chunkData.timestamp = System.currentTimeMillis();
            chunkData.worldObjects = new ArrayList<>();

            // Critical fix: Get objects from WorldData properly
            List<WorldObject> objects = worldData.getChunkObjects().get(chunkPos);
            if (objects != null) {
                for (WorldObject obj : objects) {
                    if (obj != null) {
                        Map<String, Object> objData = obj.getSerializableData();
                        if (objData != null) {
                            chunkData.worldObjects.add(objData);
                            GameLogger.info("Added object to response: " + obj.getType() +
                                " at (" + obj.getTileX() + "," + obj.getTileY() + ")");
                        }
                    }
                }
            }

            NetworkProtocol.CompressedChunkData compressed = compressChunkData(chunkData);
            if (compressed == null) {
                GameLogger.error("Failed to compress chunk data for " + chunkPos);
                return;
            }

            connection.sendTCP(compressed);

            GameLogger.info("Sent chunk data at " + chunkPos + " with " +
                (chunkData.worldObjects != null ? chunkData.worldObjects.size() : 0) + " objects");

        } catch (Exception e) {
            GameLogger.error("Error processing chunk request: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private NetworkProtocol.CompressedChunkData compressChunkData(NetworkProtocol.ChunkData chunkData) {
        // Similar to your existing code
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            GZIPOutputStream gzip = new GZIPOutputStream(baos);
            Output output = new Output(gzip);

            Kryo kryo = new Kryo();
            NetworkProtocol.registerClasses(kryo);
            kryo.setReferences(false);
            kryo.writeObject(output, chunkData);

            output.close();
            gzip.close();

            NetworkProtocol.CompressedChunkData compressed = new NetworkProtocol.CompressedChunkData();
            compressed.chunkX = chunkData.chunkX;
            compressed.chunkY = chunkData.chunkY;
            compressed.primaryBiomeType = chunkData.primaryBiomeType;
            compressed.secondaryBiomeType = chunkData.secondaryBiomeType;
            compressed.biomeTransitionFactor = chunkData.biomeTransitionFactor;
            compressed.generationSeed = worldData.getConfig().getSeed();
            compressed.data = baos.toByteArray();
            return compressed;
        } catch (IOException e) {
            GameLogger.error("Chunk compression failed: " + e.getMessage());
            return null;
        }
    }

    private void setupNetworkListener() {
        networkServer.addListener(new Listener() {
            @Override
            public void connected(Connection connection) {
                try {
                    GameLogger.info("New connection attempt from: " + connection.getRemoteAddressTCP());
                    // Check max players
                    if (playerManager.getOnlinePlayers().size() >= config.getMaxPlayers()) {
                        GameLogger.info("Connection rejected: Max players reached");
                        sendConnectionResponse(connection, false, "Server is full");
                        scheduler.schedule(() -> connection.close(), 100, TimeUnit.MILLISECONDS);
                        return;
                    }

                    // Send success response
                    NetworkProtocol.ConnectionResponse response = new NetworkProtocol.ConnectionResponse();
                    response.success = true;
                    response.message = "Connection established";
                    connection.sendTCP(response);

                    GameLogger.info("Connection " + connection.getID() + " established - awaiting authentication");

                    // Set authentication timeout
                    scheduler.schedule(() -> {
                        if (!connectedPlayers.containsKey(connection.getID())) {
                            GameLogger.info("Authentication timeout for connection: " + connection.getID());
                            connection.close();
                        }
                    }, AUTH_TIMEOUT, TimeUnit.MILLISECONDS);

                } catch (Exception e) {
                    GameLogger.error("Error handling connection: " + e.getMessage());
                    connection.close();
                }
            }

            @Override
            public void received(Connection connection, Object object) {
                try {
                    if (object instanceof FrameworkMessage) {
                        // Ignore KryoNet's internal messages
                        return;
                    }
                    if (object instanceof NetworkProtocol.WorldObjectUpdate) {
                        NetworkProtocol.WorldObjectUpdate update = (NetworkProtocol.WorldObjectUpdate) object;
                        // Validate object data
                        if (update.data == null || update.data.isEmpty()) {
                            GameLogger.error("Invalid WorldObjectUpdate received - empty data");
                            return;
                        }
                    }

                    if (object instanceof NetworkProtocol.LoginRequest) {
                        handleLoginRequest(connection, (NetworkProtocol.LoginRequest) object);
                        return;
                    }

                    if (object instanceof NetworkProtocol.RegisterRequest) {
                        handleRegisterRequest(connection, (NetworkProtocol.RegisterRequest) object);
                        return;
                    }

                    if (object instanceof NetworkProtocol.ChunkRequest) {
                        handleChunkRequest(connection, (NetworkProtocol.ChunkRequest) object);
                        return;
                    }
                    if (object instanceof NetworkProtocol.BlockPlacement) {
                        handleBlockPlacement(connection, (NetworkProtocol.BlockPlacement) object);
                    }
                    if (object instanceof NetworkProtocol.SavePlayerDataRequest) {
                        NetworkProtocol.SavePlayerDataRequest saveRequest =
                            (NetworkProtocol.SavePlayerDataRequest) object;

                        try {
                            ServerGameContext.get().getStorageSystem()
                                .savePlayerData(saveRequest.playerData.getUsername(), saveRequest.playerData);

                            ServerGameContext.get().getStorageSystem().getPlayerDataManager().flush();

                            GameLogger.info("Saved player data for: " + saveRequest.playerData.getUsername());

                        } catch (Exception e) {
                            GameLogger.error("Failed to save player data: " + e.getMessage());
                        }
                    }

                    String username = connectedPlayers.get(connection.getID());
                    if (username == null) {
                        GameLogger.error("Received unauthorized message from Connection " + connection.getID());
                        return;
                    }

                    processAuthenticatedMessage(connection, object);
                } catch (Exception e) {
                    GameLogger.error("Error handling message: " + e.getMessage());
                }
            }

            @Override
            public void disconnected(Connection connection) {
                handleDisconnect(connection);
            }
        });
    }

    private void initializePeriodicTasks() {
        scheduler.scheduleAtFixedRate(() -> {
            try {
                if (worldData != null) {
                    ServerGameContext.get().getWorldManager().saveWorld(worldData);
                    GameLogger.info("World data saved periodically.");
                }
            } catch (Exception e) {
                GameLogger.error("Error during periodic world save: " + e.getMessage());
            }
        }, SAVE_INTERVAL, SAVE_INTERVAL, TimeUnit.MILLISECONDS);
    }


    private void sendConnectionResponse(Connection connection, boolean success, String message) {
        NetworkProtocol.ConnectionResponse response = new NetworkProtocol.ConnectionResponse();
        response.success = success;
        response.message = message;

        try {
            connection.sendTCP(response);
        } catch (Exception e) {
            GameLogger.error("Error sending connection response: " + e.getMessage());
        }
    }

    private void handleChatMessage(Connection connection, NetworkProtocol.ChatMessage message) {
        if (message == null || message.content == null || message.content.isEmpty()) {
            return;
        }

        if (message.timestamp == 0) {
            message.timestamp = System.currentTimeMillis();
        }

        for (Connection conn : networkServer.getConnections()) {
            if (conn.getID() != connection.getID()) {
                try {
                    networkServer.sendToTCP(conn.getID(), message);
                } catch (Exception e) {
                }
            }
        }
    }

    private void sendRegistrationResponse(Connection connection, boolean success, String message) {
        NetworkProtocol.RegisterResponse response = new NetworkProtocol.RegisterResponse();
        response.success = success;
        response.message = message;
        networkServer.sendToTCP(connection.getID(), response);
    }

    private boolean isValidUsername(String username) {
        return username != null &&
            username.length() >= 3 &&
            username.length() <= 20 &&
            username.matches("^[a-zA-Z0-9_]+$");
    }

    private void handleRegisterRequest(Connection connection, NetworkProtocol.RegisterRequest request) {
        try {
            GameLogger.info("Processing registration request for username: " + request.username);

            // Basic validation
            if (request.username == null || request.username.isEmpty() ||
                request.password == null || request.password.isEmpty()) {
                sendRegistrationResponse(connection, false, "Username and password are required.");
                return;
            }
            if (!isValidUsername(request.username)) {
                sendRegistrationResponse(connection, false,
                    "Username must be 3-20 characters long and contain only letters, numbers, and underscores.");
                return;
            }

            // Check if username already exists
            if (databaseManager.checkUsernameExists(request.username)) {
                sendRegistrationResponse(connection, false, "Username already exists.");
                return;
            }

            // Attempt to register the player in database
            boolean success = databaseManager.registerPlayer(request.username, request.password);

            if (success) {
                GameLogger.info("Successfully registered new player: " + request.username);
                sendRegistrationResponse(connection, true, "Registration successful!");
            } else {
                GameLogger.error("Failed to register player: " + request.username);
                sendRegistrationResponse(connection, false, "Registration failed. Please try again.");
            }

        } catch (Exception e) {
            GameLogger.error("Error during registration: " + e.getMessage());
            sendRegistrationResponse(connection, false, "An error occurred during registration.");
        }
    }

    public void start() {
        try {
            GameLogger.info("Starting server...");

            if (!isPortAvailable(config.getTcpPort())) {
                throw new IOException("TCP port " + config.getTcpPort() + " is already in use.");
            }

            if (!isPortAvailable(config.getUdpPort())) {
                throw new IOException("UDP port " + config.getUdpPort() + " is already in use.");
            }

            GameLogger.info("Storage system initialized");

            GameLogger.info("World manager initialized");
            initializePeriodicTasks();
            // Load plugins
            pluginManager.loadPlugins();
            pluginManager.enablePlugins();
            GameLogger.info("Plugins loaded");

            NetworkProtocol.registerClasses(networkServer.getKryo());
            GameLogger.info("Network classes registered");

            networkServer.start();

            networkServer.bind(config.getTcpPort(), config.getUdpPort());
            running = true;

            GameLogger.info("Server started successfully on TCP port " + config.getTcpPort() +
                " and UDP port " + config.getUdpPort());
            GameLogger.info("Maximum players: " + config.getMaxPlayers());

        } catch (Exception e) {
            GameLogger.info("Failed to start server: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("Server failed to start", e);
        }
    }

    private boolean isPortAvailable(int port) {
        try (ServerSocket ss = new ServerSocket(port)) {
            ss.setReuseAddress(true);
            return true;
        } catch (IOException e) {
            return false;
        }
    }

    private void processAuthenticatedMessage(Connection connection, Object message) {
        String username = connectedPlayers.get(connection.getID());
        if (username == null) {
            GameLogger.error("Received message from non-authenticated connection: " + connection.getID());
            return;
        }

        ServerPlayer player = activePlayers.get(username);
        if (player == null) {
            GameLogger.error("No player instance found for authenticated user: " + username);
            // Attempt to recover
            PlayerData savedData = ServerGameContext.get().getStorageSystem().getPlayerDataManager().loadPlayerData(UUID.nameUUIDFromBytes(username.getBytes()));
            if (savedData != null) {
                player = new ServerPlayer(username, savedData);
                activePlayers.put(username, player);
                GameLogger.info("Recovered player instance for: " + username);
            } else {
                connection.close(); // Force disconnect if unrecoverable
                return;
            }
        }

        try {
            if (message instanceof NetworkProtocol.PlayerUpdate) {
                handlePlayerUpdate(connection, (NetworkProtocol.PlayerUpdate) message);
            } else if (message instanceof NetworkProtocol.ChatMessage) {
                handleChatMessage(connection, (NetworkProtocol.ChatMessage) message);
            } else if (message instanceof NetworkProtocol.PlayerAction) {
                handlePlayerAction(connection, (NetworkProtocol.PlayerAction) message);
            }
        } catch (Exception e) {
            GameLogger.error("Error processing message for " + username + ": " + e.getMessage());
        }
    }


    private void handleItemPickup(NetworkProtocol.PlayerAction action, Connection connection) {
        String username = connectedPlayers.get(connection.getID());
        if (username == null) {
            GameLogger.error("Unauthorized pickup attempt");
            return;
        }

        // Suppose action.targetPosition is the tile/pixel coords of the item
        Vector2 itemPos = action.targetPosition;
        if (itemPos == null) {
            GameLogger.error("No item position specified");
            return;
        }

        // Convert to chunk coords
        Vector2 chunkPos = new Vector2(
            (int) Math.floor(itemPos.x / (CHUNK_SIZE * World.TILE_SIZE)),
            (int) Math.floor(itemPos.y / (CHUNK_SIZE * World.TILE_SIZE))
        );

        // Look up chunk’s object list
        List<WorldObject> objects = worldData.getChunkObjects().get(chunkPos);
        if (objects == null) return;

        // Find the nearest item object
        WorldObject itemObject = null;
        float minDist = Float.MAX_VALUE;
        for (WorldObject obj : objects) {
            if (obj.getType() == WorldObject.ObjectType.POKEBALL /* or ITEM, ETC. */) {
                float dist = Vector2.dst(obj.getPixelX(), obj.getPixelY(), itemPos.x, itemPos.y);
                if (dist < minDist && dist < 48) {
                    minDist = dist;
                    itemObject = obj;
                }
            }
        }
        if (itemObject == null) {
            GameLogger.info("No item found at pickup location");
            return;
        }

        // Remove from chunk
        if (objects.remove(itemObject)) {
            worldData.getChunkObjects().put(chunkPos, objects);

            // Broadcast removal
            NetworkProtocol.WorldObjectUpdate update = new NetworkProtocol.WorldObjectUpdate();
            update.objectId = itemObject.getId();
            update.type = NetworkProtocol.NetworkObjectUpdateType.REMOVE;
            networkServer.sendToAllTCP(update);

            // Example: add to player’s inventory
            // e.g. "wooden_plank" or "pokeball" item
            // This will vary by your inventory logic
            PlayerData playerData = /* load or get from your manager */
                ServerGameContext.get().getStorageSystem().getPlayerDataManager()
                    .loadPlayerData(UUID.nameUUIDFromBytes(username.getBytes()));
            if (playerData != null) {
                // e.g. add 1 "pokeball" to inventory
                playerData.getInventoryItems().add(new ItemData("pokeball", 1, UUID.randomUUID()));
                // Then save
                ServerGameContext.get().getStorageSystem()
                    .getPlayerDataManager().savePlayerData(UUID.nameUUIDFromBytes(username.getBytes()), playerData);
            }

            // Save chunk or entire world
            ServerGameContext.get().getWorldManager().saveWorld(worldData);
            GameLogger.info(username + " picked up item " + itemObject.getId()
                + " at " + itemObject.getPixelX() + "," + itemObject.getPixelY());
        }
    }

    private WorldObject findWorldObjectById(String objectId) {
        for (List<WorldObject> list : worldData.getChunkObjects().values()) {
            for (WorldObject obj : list) {
                if (obj.getId().equals(objectId)) {
                    return obj;
                }
            }
        }
        return null;
    }

    private void handlePlayerAction(Connection connection, NetworkProtocol.PlayerAction action) {
        if (action == null || action.playerId == null) {
            GameLogger.error("Invalid player action received");
            return;
        }

        ServerPlayer player = activePlayers.get(action.playerId);
        if (player == null) {
            GameLogger.error("No player found for action: " + action.playerId);
            return;
        }

        switch (action.actionType) {
            case CHOP_START:
            case PUNCH_START:  // Handle both CHOP and PUNCH the same way
                GameLogger.info("Processing " + action.actionType + " for player " + action.playerId +
                    " at position (" + action.tileX + "," + action.tileY +
                    ") direction: " + action.direction);

                WorldObject targetTree = findServerChoppableObject(player, action.direction);
                if (targetTree != null) {
                    player.setChoppingObject(targetTree);
                    GameLogger.info("Player " + action.playerId + " started chopping tree: " +
                        targetTree.getId() + " at (" + targetTree.getTileX() + "," +
                        targetTree.getTileY() + ")");
                } else {
                    GameLogger.error("No choppable object found near player " + action.playerId);
                }
                networkServer.sendToAllExceptTCP(connection.getID(), action);
                break;

            case CHOP_STOP:
            case PUNCH_STOP:  // Handle both CHOP and PUNCH stop the same way
                handleChopProgress(action);
                networkServer.sendToAllExceptTCP(connection.getID(), action);
                break;
        }
    }

    private void handleChopStart(NetworkProtocol.PlayerAction action) {
        if (action == null || action.playerId == null) {
            GameLogger.error("Invalid CHOP_START: missing playerId");
            return;
        }

        // Add logging to track action details
        GameLogger.info("Processing CHOP_START for player " + action.playerId +
            " at position (" + action.tileX + "," + action.tileY +
            ") direction: " + action.direction);

        ServerPlayer player = activePlayers.get(action.playerId);
        if (player == null) {
            GameLogger.error("No ServerPlayer found for " + action.playerId);
            return;
        }

        // Calculate target tile based on position and direction
        int targetX = action.tileX;
        int targetY = action.tileY;

        // Add this debug logging
        GameLogger.info("Looking for choppable object near player " +
            action.playerId + " at (" + player.getPosition().x + "," +
            player.getPosition().y + ")");

        WorldObject targetTree = findServerChoppableObject(player, action.direction);
        if (targetTree != null) {
            GameLogger.info("Found tree: " + targetTree.getId() + " at (" +
                targetTree.getTileX() + "," + targetTree.getTileY() + ")");
            player.setChoppingObject(targetTree);
        } else {
            GameLogger.error("No matching tree found to chop at (" + targetX + "," + targetY + ")");
        }
    }
    private WorldObject findServerChoppableObject(ServerPlayer player, String direction) {
        Vector2 playerPos = player.getPosition();
        int playerTileX = (int)Math.floor(playerPos.x / World.TILE_SIZE);
        int playerTileY = (int)Math.floor(playerPos.y / World.TILE_SIZE);

        // Convert to pixel coordinates for proper distance calculations
        float playerPixelX = playerTileX * World.TILE_SIZE;
        float playerPixelY = playerTileY * World.TILE_SIZE;

        GameLogger.info("Player position - Tile: (" + playerTileX + "," + playerTileY +
            ") Pixel: (" + playerPixelX + "," + playerPixelY + ")");

        // Calculate target position based on direction
        float targetPixelX = playerPixelX;
        float targetPixelY = playerPixelY;
        float searchDistance = World.TILE_SIZE * 1.5f;

        switch (direction) {
            case "up":    targetPixelY += searchDistance; break;
            case "down":  targetPixelY -= searchDistance; break;
            case "left":  targetPixelX -= searchDistance; break;
            case "right": targetPixelX += searchDistance; break;
        }

        // Create search rectangle around target position
        Rectangle searchArea = new Rectangle(
            targetPixelX - World.TILE_SIZE,
            targetPixelY - World.TILE_SIZE,
            World.TILE_SIZE * 2,
            World.TILE_SIZE * 2
        );

        GameLogger.info("Search area pixel coords: x=" + searchArea.x + " y=" + searchArea.y +
            " w=" + searchArea.width + " h=" + searchArea.height);

        // Calculate chunk coordinates for object lookup
        int chunkX = Math.floorDiv(playerTileX, CHUNK_SIZE);
        int chunkY = Math.floorDiv(playerTileY, CHUNK_SIZE);

        // Search in current and adjacent chunks
        for (int dx = -1; dx <= 1; dx++) {
            for (int dy = -1; dy <= 1; dy++) {
                Vector2 searchChunkPos = new Vector2(chunkX + dx, chunkY + dy);
                List<WorldObject> objects = ServerGameContext.get().getWorldObjectManager().getObjectsForChunk(MULTIPLAYER_WORLD_NAME,searchChunkPos);
                if (objects.isEmpty()){
                    GameLogger.error("No objects found for chunk " + searchChunkPos);
                }
                for (WorldObject obj : objects) {
                    if (isChoppable(obj.getType())) {
                        Rectangle objBounds = new Rectangle(
                            obj.getTileX() * World.TILE_SIZE - World.TILE_SIZE,
                            obj.getTileY() * World.TILE_SIZE,
                            World.TILE_SIZE * 2,
                            World.TILE_SIZE * 2
                        );

                        if (objBounds.overlaps(searchArea)) {
                            GameLogger.info("Found choppable object: " + obj.getType() +
                                " at (" + obj.getTileX() + "," + obj.getTileY() + ")");
                            return obj;
                        }
                    }
                }
            }
        }

        GameLogger.info("No choppable objects found in search area");
        return null;
    }

    private void handleChopProgress(NetworkProtocol.PlayerAction action) {
        if (action == null || action.playerId == null) {
            return;
        }
        try {
            ServerPlayer player = activePlayers.get(action.playerId);
            if (player == null) {
                GameLogger.error("No ServerPlayer found for " + action.playerId);
                return;
            }

            // The tree that was being chopped
            WorldObject choppedTree = player.getChoppingObject();
            if (choppedTree == null) {
                GameLogger.info("No active chopping object for player " + action.playerId);
                return;
            }

            // Clear the chopping reference
            player.setChoppingObject(null);

            GameLogger.info("Processing chop completion for tree ID " + choppedTree.getId()
                + " at tile (" + choppedTree.getTileX() + "," + choppedTree.getTileY() + ")");

            // Convert tile coords to chunk coords
            Vector2 chunkPos = getChunkCoordsForObject(choppedTree);

            // Remove from chunk objects AND broadcast to all clients
            if (removeObjectFromChunks(choppedTree.getId(), chunkPos)) {
                // (1) Create and send object removal update
                NetworkProtocol.WorldObjectUpdate objUpdate = new NetworkProtocol.WorldObjectUpdate();
                objUpdate.objectId = choppedTree.getId();
                objUpdate.type = NetworkProtocol.NetworkObjectUpdateType.REMOVE;
                objUpdate.data = choppedTree.getSerializableData();
                networkServer.sendToAllTCP(objUpdate);

                // (2) Mark chunk as dirty and save it
                Chunk chunk = ServerGameContext.get().getWorldManager()
                    .loadChunk(MULTIPLAYER_WORLD_NAME, (int) chunkPos.x, (int) chunkPos.y);

                if (chunk != null) {
                    chunk.setDirty(true);
                    ServerGameContext.get().getWorldManager()
                        .saveChunk(MULTIPLAYER_WORLD_NAME, chunk);
                    GameLogger.info("Saved chunk after tree removal at " + chunkPos);
                }


                GameLogger.info("Tree removal complete and broadcasted: " + choppedTree.getId());
            }

        } catch (Exception e) {
            GameLogger.error("Error in handleChopProgress: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private boolean removeObjectFromChunks(String objectId, Vector2 chunkPos) {
        List<WorldObject> objects = ServerGameContext.get().getWorldObjectManager().getObjectsForChunk(MULTIPLAYER_WORLD_NAME, chunkPos);
        if (objects.removeIf(obj -> obj.getId().equals(objectId))) {
            // Update the chunk -> objects mapping
            ServerGameContext.get().getWorldObjectManager().setObjectsForChunk(MULTIPLAYER_WORLD_NAME, chunkPos, objects);
            return true;
        }
        return false;
    }

    /**
     * Given a WorldObject, figure out which chunk it belongs to.
     */
    private Vector2 getChunkCoordsForObject(WorldObject obj) {
        int cx = Math.floorDiv(obj.getTileX(), CHUNK_SIZE);
        int cy = Math.floorDiv(obj.getTileY(), CHUNK_SIZE);
        return new Vector2(cx, cy);
    }


    private void handlePokeballSpawning(Vector2 chunkPos, Chunk chunk) {
        try {
            List<WorldObject> chunkObjects = worldData.getChunkObjects().computeIfAbsent(chunkPos, k -> new ArrayList<>());

            // Count existing pokeballs
            long pokeballCount = chunkObjects.stream()
                .filter(obj -> obj.getType() == WorldObject.ObjectType.POKEBALL)
                .count();
            Random random = new Random();
            // Check if we can spawn a new pokeball
            if (pokeballCount < MAX_POKEBALLS_PER_CHUNK && random.nextFloat() < POKEBALL_SPAWN_CHANCE) {
                // Find valid spawn location
                int attempts = 10;
                while (attempts > 0) {
                    int localX = random.nextInt(Chunk.CHUNK_SIZE);
                    int localY = random.nextInt(Chunk.CHUNK_SIZE);

                    int worldTileX = (int) (chunkPos.x * Chunk.CHUNK_SIZE + localX);
                    int worldTileY = (int) (chunkPos.y * Chunk.CHUNK_SIZE + localY);

                    // Check if location is valid (e.g., on grass or walkable terrain)
                    if (chunk.isPassable(localX, localY)) {
                        // Create new pokeball object
                        WorldObject pokeball = new WorldObject(
                            worldTileX,
                            worldTileY,
                            null, // Server doesn't need texture
                            WorldObject.ObjectType.POKEBALL
                        );

                        // Add to chunk objects
                        chunkObjects.add(pokeball);

                        // Create spawn update
                        NetworkProtocol.WorldObjectUpdate update = new NetworkProtocol.WorldObjectUpdate();
                        update.objectId = pokeball.getId();
                        update.type = NetworkProtocol.NetworkObjectUpdateType.ADD;
                        update.data = pokeball.getSerializableData();

                        // Broadcast to all players
                        networkServer.sendToAllTCP(update);

                        GameLogger.info("Spawned pokeball at " + worldTileX + "," + worldTileY);
                        break;
                    }
                    attempts--;
                }
            }
        } catch (Exception e) {
            GameLogger.error("Error handling pokeball spawn: " + e.getMessage());
        }
    }


    private boolean isChoppable(WorldObject.ObjectType type) {
        return type == WorldObject.ObjectType.TREE_0 ||
            type == WorldObject.ObjectType.TREE_1 ||
            type == WorldObject.ObjectType.SNOW_TREE ||
            type == WorldObject.ObjectType.HAUNTED_TREE ||
            type == WorldObject.ObjectType.RAIN_TREE ||
            type == WorldObject.ObjectType.APRICORN_TREE ||
            type == WorldObject.ObjectType.RUINS_TREE;
    }


    private void handleBlockPlacement(Connection connection, NetworkProtocol.BlockPlacement placement) {
        String username = connectedPlayers.get(connection.getID());
        if (username == null || !username.equals(placement.username)) {
            GameLogger.error("Unauthorized block placement attempt by " + placement.username);
            return;
        }

        switch (placement.action) {
            case PLACE:
                // Place the block in the server's world
                boolean placed = blockManager.placeBlock(PlaceableBlock.BlockType.fromItemId(placement.blockTypeId), placement.tileX, placement.tileY);
                if (placed) {
                    // Broadcast to other clients
                    networkServer.sendToAllExceptTCP(connection.getID(), placement);
                } else {
                    GameLogger.error("Failed to place block at (" + placement.tileX + ", " + placement.tileY + ")");
                }
                break;
            case REMOVE:
                // Remove the block from the server's world
                blockManager.removeBlock(placement.tileX, placement.tileY);
                // Broadcast to other clients
                networkServer.sendToAllExceptTCP(connection.getID(), placement);
                break;
        }
    }

    private int selectTileType(Map<Integer, Integer> distribution, Random random) {
        int roll = random.nextInt(100);
        int total = 0;

        for (Map.Entry<Integer, Integer> entry : distribution.entrySet()) {
            total += entry.getValue();
            if (roll < total) {
                return entry.getKey();
            }
        }

        return distribution.keySet().iterator().next();
    }

    public ServerConnectionConfig getConfig() {
        return config;
    }


    private static class ConnectionInfo {
        final int connectionId;
        final long connectionTime;
        volatile boolean isAuthenticated;

        ConnectionInfo(int connectionId) {
            this.connectionId = connectionId;
            this.connectionTime = System.currentTimeMillis();
            this.isAuthenticated = false;
        }
    }

}

================
File: main/java/org/discord/PluginManager.java
================
package org.discord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import io.github.pokemeetup.multiplayer.server.plugin.PluginConfig;
import io.github.pokemeetup.multiplayer.server.plugin.ServerPlugin;
import io.github.pokemeetup.system.data.WorldData;
import io.github.pokemeetup.system.servers.PluginContext;

import java.io.*;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.logging.Logger;

public class PluginManager {
    private static final Logger logger = Logger.getLogger(PluginManager.class.getName());
    private final Map<String, ServerPlugin> loadedPlugins = new ConcurrentHashMap<>();
    private final Map<String, PluginConfig> pluginConfigs = new ConcurrentHashMap<>();
    private final Path pluginsDir;
    private final WorldData gameWorld;

    public PluginManager(WorldData gameWorld) {
        this.gameWorld = gameWorld;
        this.pluginsDir = Paths.get("plugins");
        createPluginDirectory();
    }

    private void createPluginDirectory() {
        try {
            Files.createDirectories(pluginsDir);
        } catch (IOException e) {
            logger.severe("Failed to create plugins directory: " + e.getMessage());
            throw new RuntimeException("Failed to create plugins directory", e);
        }
    }

    public void loadPlugins() {
        try (DirectoryStream<Path> stream = Files.newDirectoryStream(pluginsDir, "*.jar")) {
            for (Path jarPath : stream) {
                loadPlugin(jarPath);
            }
        } catch (IOException e) {
            logger.severe("Error loading plugins: " + e.getMessage());
        }
    }

    private void loadPlugin(Path jarPath) {
        try (JarFile jarFile = new JarFile(jarPath.toFile())) {
            // Load plugin.yml
            JarEntry configEntry = jarFile.getJarEntry("plugin.yml");
            if (configEntry == null) {
                throw new IllegalStateException("Missing plugin.yml in " + jarPath.getFileName());
            }

            // Load and parse config
            PluginConfig config = loadPluginConfig(jarFile.getInputStream(configEntry));

            // Validate dependencies
            validateDependencies(config);

            // Create isolated classloader for plugin
            URLClassLoader classLoader = new URLClassLoader(
                new URL[]{jarPath.toUri().toURL()},
                getClass().getClassLoader()
            );

            // Load main plugin class
            Class<?> mainClass = Class.forName(config.getMainClass(), true, classLoader);
            if (!ServerPlugin.class.isAssignableFrom(mainClass)) {
                throw new IllegalStateException("Plugin main class must implement ServerPlugin interface");
            }

            ServerPlugin plugin = (ServerPlugin) mainClass.getDeclaredConstructor().newInstance();

            // Create plugin context and initialize
            Map<String, Object> pluginConfig = loadPluginConfig(plugin.getId());
            PluginContext context = new PluginContext(gameWorld, pluginConfig);
            plugin.onLoad(context);

            // Store loaded plugin
            loadedPlugins.put(plugin.getId(), plugin);
            pluginConfigs.put(plugin.getId(), config);

            logger.info("Successfully loaded plugin: " + config.getName() + " v" + config.getVersion());

        } catch (Exception e) {
            logger.severe("Failed to load plugin " + jarPath.getFileName() + ": " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void validateDependencies(PluginConfig config) {
        for (String dependency : config.getDependencies()) {
            if (!loadedPlugins.containsKey(dependency)) {
                throw new IllegalStateException("Missing required dependency: " + dependency);
            }
        }
    }

    private PluginConfig loadPluginConfig(InputStream input) {
        try {
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            try (Reader reader = new InputStreamReader(input)) {
                return gson.fromJson(reader, PluginConfig.class);
            }
        } catch (Exception e) {
            throw new RuntimeException("Failed to load plugin config", e);
        }
    }

    public void enablePlugins() {
        List<String> enableOrder = calculateEnableOrder();
        for (String pluginId : enableOrder) {
            ServerPlugin plugin = loadedPlugins.get(pluginId);
            try {
                plugin.onEnable();
                logger.info("Enabled plugin: " + pluginId);
            } catch (Exception e) {
                logger.severe("Failed to enable plugin " + pluginId + ": " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private List<String> calculateEnableOrder() {
        // Simple topological sort for dependencies
        Map<String, Set<String>> graph = new HashMap<>();
        for (Map.Entry<String, PluginConfig> entry : pluginConfigs.entrySet()) {
            graph.put(entry.getKey(), new HashSet<>(entry.getValue().getDependencies()));
        }

        List<String> result = new ArrayList<>();
        Set<String> visited = new HashSet<>();

        for (String plugin : graph.keySet()) {
            if (!visited.contains(plugin)) {
                visitPlugin(plugin, graph, visited, new HashSet<>(), result);
            }
        }

        return result;
    }

    private void visitPlugin(String plugin, Map<String, Set<String>> graph,
                             Set<String> visited, Set<String> visiting, List<String> result) {
        visiting.add(plugin);

        Set<String> dependencies = graph.get(plugin) != null ? graph.get(plugin) : new HashSet<>();
        for (String dep : dependencies) {
            if (visiting.contains(dep)) {
                throw new IllegalStateException("Circular dependency detected: " + plugin + " -> " + dep);
            }
            if (!visited.contains(dep)) {
                visitPlugin(dep, graph, visited, visiting, result);
            }
        }

        visiting.remove(plugin);
        visited.add(plugin);
        result.add(plugin);
    }

    public void disablePlugins() {
        List<String> disableOrder = new ArrayList<>(loadedPlugins.keySet());
        Collections.reverse(disableOrder);  // Disable in reverse order

        for (String pluginId : disableOrder) {
            try {
                ServerPlugin plugin = loadedPlugins.get(pluginId);
                plugin.onDisable();
                logger.info("Disabled plugin: " + pluginId);
            } catch (Exception e) {
                logger.severe("Error disabling plugin " + pluginId + ": " + e.getMessage());
            }
        }
        loadedPlugins.clear();
        pluginConfigs.clear();
    }

    // Public API
    public ServerPlugin getPlugin(String id) {
        return loadedPlugins.get(id);
    }

    public Collection<ServerPlugin> getPlugins() {
        return Collections.unmodifiableCollection(loadedPlugins.values());
    }

    public void savePluginConfig(String pluginId, Map<String, Object> config) {
        Path configPath = pluginsDir.resolve(pluginId + ".json");
        try {
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
            String json = gson.toJson(config);
            Files.write(configPath, json.getBytes(StandardCharsets.UTF_8));
        } catch (IOException e) {
            logger.severe("Failed to save config for plugin " + pluginId + ": " + e.getMessage());
        }
    }

    public Map<String, Object> loadPluginConfig(String pluginId) {
        Path configPath = pluginsDir.resolve(pluginId + ".json");
        if (!Files.exists(configPath)) {
            ServerPlugin plugin = loadedPlugins.get(pluginId);
            return plugin != null ? new HashMap<>() : new HashMap<>();
        }

        try {
            Gson gson = new GsonBuilder().create();
            byte[] bytes = Files.readAllBytes(configPath);
            String json = new String(bytes, StandardCharsets.UTF_8);
            @SuppressWarnings("unchecked")
            Map<String, Object> config = gson.fromJson(json, Map.class);
            return config != null ? config : new HashMap<>();
        } catch (IOException e) {
            logger.severe("Failed to load config for plugin " + pluginId + ": " + e.getMessage());
            return new HashMap<>();
        }
    }
}

================
File: main/java/org/discord/ServerBlockManager.java
================
package org.discord;

import com.badlogic.gdx.math.Vector2;
import io.github.pokemeetup.blocks.PlaceableBlock;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class ServerBlockManager {
    private final Map<Vector2, PlaceableBlock> placedBlocks = new ConcurrentHashMap<>();

    public boolean placeBlock(PlaceableBlock.BlockType type, int tileX, int tileY) {
        Vector2 pos = new Vector2(tileX, tileY);
        if (placedBlocks.containsKey(pos)) {
            return false;
        }
        PlaceableBlock block = new PlaceableBlock(type, pos);
        placedBlocks.put(pos, block);
        return true;
    }

    public void removeBlock(int tileX, int tileY) {
        Vector2 pos = new Vector2(tileX, tileY);
        if (placedBlocks.containsKey(pos)) {
            return;
        }
        placedBlocks.remove(pos);
    }

    public Map<Vector2, PlaceableBlock> getPlacedBlocks() {
        return placedBlocks;
    }
}

================
File: main/java/org/discord/ServerLauncher.java
================
package org.discord;

import com.badlogic.gdx.math.Vector2;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import io.github.pokemeetup.multiplayer.server.ServerStorageSystem;
import io.github.pokemeetup.multiplayer.server.config.ServerConnectionConfig;
import io.github.pokemeetup.system.data.WorldData;
import io.github.pokemeetup.system.gameplay.overworld.Chunk;
import io.github.pokemeetup.system.gameplay.overworld.WorldObject;
import io.github.pokemeetup.utils.storage.GameFileSystem;
import org.discord.context.ServerGameContext;
import org.discord.files.ServerFileDelegate;
import org.discord.utils.ServerWorldManager;
import org.h2.tools.Server;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Logger;

public class ServerLauncher {
    private static final String DEFAULT_ICON = "server-icon.png";
    private static final String DEFAULT_MOTD = "Basic and default server description fr!";
    private static final Logger logger = Logger.getLogger(ServerLauncher.class.getName());
    private static final Path SERVER_ROOT = Paths.get(".");
    public static ServerStorageSystem storage;

    public static void main(String[] args) {
        Server h2Server = null;
        try {
            // Initialize server deployment
            logger.info("Initializing server deployment...");
            DeploymentHelper.createServerDeployment(SERVER_ROOT);
            logger.info("Server deployment initialized");

            // Initialize file system
            GameFileSystem.getInstance().setDelegate(new ServerFileDelegate());
            logger.info("Server file system initialized");

            // Start H2 Database Server
            h2Server = startH2Server();

            // Load server configuration
            ServerConnectionConfig config = loadServerConfig();
            logger.info("Server configuration loaded");

            // Initialize storage
            storage = new ServerStorageSystem();
            logger.info("Storage system initialized");

            // Initialize world management
            ServerWorldManager serverWorldManager = ServerWorldManager.getInstance(storage);
            logger.info("World manager initialized");

            // Initialize ServerGameContext first!
            ServerWorldObjectManager worldObjectManager = new ServerWorldObjectManager();
            ServerGameContext.init(serverWorldManager, storage, worldObjectManager);
            logger.info("Server game context initialized");

            // Now handle world initialization
            WorldData worldData = serverWorldManager.loadWorld("multiplayer_world");
            if (worldData == null) {
                logger.info("Creating new multiplayer world...");
                long seed = System.currentTimeMillis();
                worldData = serverWorldManager.createWorld(
                    "multiplayer_world",
                    seed,
                    0.15f,  // Tree rate
                    0.05f   // Pokemon rate
                );

                if (worldData == null) {
                    throw new RuntimeException("Failed to create multiplayer world");
                }

                // Generate initial chunks after world creation
                generateInitialChunks(serverWorldManager, worldData);
                logger.info("Created new multiplayer world with seed: " + seed);
            } else {
                logger.info("Loaded existing multiplayer world");
            }

            // Start game server
            GameServer server = new GameServer(config);
            server.start();
            logger.info("Game server started successfully");

            // Add shutdown hook
            addShutdownHook(server, h2Server);

        } catch (Exception e) {
            logger.severe("Failed to start server: " + e.getMessage());
            e.printStackTrace();
            if (h2Server != null) {
                h2Server.stop();
            }
            System.exit(1);
        }
    }



    private static void generateInitialChunks(ServerWorldManager serverWorldManager, WorldData worldData) {
        logger.info("Generating initial spawn chunks...");

        // Generate a larger initial area to ensure good transitions
        int radius = 2;  // This gives us a 5x5 area

        // First pass: Generate all chunks
        for (int x = -radius; x <= radius; x++) {
            for (int y = -radius; y <= radius; y++) {
                try {
                    // Load/generate the chunk
                    Chunk chunk = serverWorldManager.loadChunk("multiplayer_world", x, y);
                    if (chunk != null) {
                        // Save immediately to ensure proper object placement
                        serverWorldManager.saveChunk("multiplayer_world", chunk);
                        logger.info(String.format("Generated chunk at (%d, %d)", x, y));
                    }
                } catch (Exception e) {
                    logger.warning(String.format("Failed to generate chunk at (%d, %d): %s", x, y, e.getMessage()));
                }
            }
        }

        // Second pass: Verify all chunks and objects
        for (int x = -radius; x <= radius; x++) {
            for (int y = -radius; y <= radius; y++) {
                Vector2 chunkPos = new Vector2(x, y);
                List<WorldObject> objects = worldData.getChunkObjects().get(chunkPos);
                if (objects != null) {
                    logger.info(String.format("Chunk (%d, %d) contains %d objects", x, y, objects.size()));

                    // Log object positions for debugging
                    for (WorldObject obj : objects) {
                        if (obj != null) {
                            logger.fine(String.format("- %s at (%d,%d)",
                                obj.getType(), obj.getTileX(), obj.getTileY()));
                        }
                    }
                } else {
                    logger.warning(String.format("No objects found in chunk (%d, %d)", x, y));
                }
            }
        }

        logger.info("Initial spawn chunks generated");

        // Final world save
        serverWorldManager.saveWorld(worldData);
    }

    private static Server startH2Server() throws Exception {
        Server h2Server = Server.createTcpServer(
            "-tcpPort", "9101",
            "-tcpAllowOthers",
            "-ifNotExists",
            "-baseDir", "./data"
        ).start();

        if (h2Server.isRunning(true)) {
            logger.info("H2 Database Server started on port 9101");
        }
        return h2Server;
    }

    private static ServerConnectionConfig loadServerConfig() throws IOException {
        Path configDir = SERVER_ROOT.resolve("config");
        Path configFile = configDir.resolve("server.json");

        try {
            if (!configFile.toFile().exists()) {
                logger.info("Configuration not found, loading defaults");
                return new ServerConnectionConfig(
                    "0.0.0.0",
                    54555,
                    54556,
                    "Pokemon Meetup Server",
                    true,
                    100
                );
            }

            Gson gson = new GsonBuilder()
                .setPrettyPrinting()
                .serializeNulls()
                .create();

            String jsonContent = Files.readString(configFile);
            ServerConnectionConfig config = gson.fromJson(jsonContent, ServerConnectionConfig.class);
            config.setServerIP("0.0.0.0");

            return config;
        } catch (Exception e) {
            Path iconPath = SERVER_ROOT.resolve(DEFAULT_ICON);
            if (!Files.exists(iconPath)) {
                // Copy default icon from resources
                try (InputStream is = ServerLauncher.class.getResourceAsStream("/assets/default-server-icon.png")) {
                    if (is != null) {
                        Files.copy(is, iconPath);
                    }
                }
            }
            logger.warning("Error loading config: " + e.getMessage() + ". Using defaults.");
            ServerConnectionConfig config = new ServerConnectionConfig(
                "0.0.0.0",
                54555,
                54556,
                "Pokemon Meetup Server",
                true,
                100
            );
            config.setMotd(DEFAULT_MOTD);
            config.setIconPath(DEFAULT_ICON);
            return config;
        }
    }
    private static void addShutdownHook(GameServer server, Server h2Server) {
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            logger.info("Shutting down server...");
            try {
                server.shutdown();
                logger.info("Game server stopped");

                storage.shutdown();

                if (h2Server != null) {
                    h2Server.stop();
                    logger.info("Database server stopped");
                }

            } catch (Exception e) {
                logger.severe("Error during shutdown: " + e.getMessage());
            }
        }));
    }
}

================
File: main/java/org/discord/ServerWorldObjectManager.java
================
package org.discord;

import com.badlogic.gdx.math.Vector2;
import io.github.pokemeetup.system.gameplay.overworld.Chunk;
import io.github.pokemeetup.system.gameplay.overworld.World;
import io.github.pokemeetup.system.gameplay.overworld.WorldObject;
import io.github.pokemeetup.utils.GameLogger;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;

public class ServerWorldObjectManager {
    private final Map<String, Map<Vector2, List<WorldObject>>> worldObjectsByWorld = new ConcurrentHashMap<>();
    private final Map<Vector2, Long> lastChunkAccess = new ConcurrentHashMap<>();

    public void initializeWorld(String worldName) {
        worldObjectsByWorld.putIfAbsent(worldName, new ConcurrentHashMap<>());
    }

    public List<WorldObject> getObjectsForChunk(String worldName, Vector2 chunkPos) {
        Map<Vector2, List<WorldObject>> worldObjects = worldObjectsByWorld.get(worldName);
        if (worldObjects == null) return new ArrayList<>();

        List<WorldObject> objects = worldObjects.get(chunkPos);
        lastChunkAccess.put(chunkPos, System.currentTimeMillis());
        return objects != null ? objects : new ArrayList<>();
    }

    public void setObjectsForChunk(String worldName, Vector2 chunkPos, List<WorldObject> objects) {
        Map<Vector2, List<WorldObject>> worldObjects = worldObjectsByWorld.computeIfAbsent(
            worldName, k -> new ConcurrentHashMap<>());

        if (objects == null || objects.isEmpty()) {
            worldObjects.remove(chunkPos);
            return;
        }

        List<WorldObject> safeObjects = new CopyOnWriteArrayList<>();
        for (WorldObject obj : objects) {
            if (obj != null) {
                if (obj.getId() == null) {
                    obj.setId(UUID.randomUUID().toString());
                }
                obj.ensureTexture();
                safeObjects.add(obj);
            }
        }

        worldObjects.put(chunkPos, safeObjects);
        lastChunkAccess.put(chunkPos, System.currentTimeMillis());
        GameLogger.info("Updated " + safeObjects.size() + " objects in chunk " + chunkPos +
            " for world " + worldName);
    }

    public void removeObject(String worldName, Vector2 chunkPos, String objectId) {
        Map<Vector2, List<WorldObject>> worldObjects = worldObjectsByWorld.get(worldName);
        if (worldObjects == null) return;

        List<WorldObject> objects = worldObjects.get(chunkPos);
        if (objects != null) {
            objects.removeIf(obj -> obj.getId().equals(objectId));
            if (objects.isEmpty()) {
                worldObjects.remove(chunkPos);
            }
            GameLogger.info("Removed object " + objectId + " from chunk " + chunkPos);
        }
    }

    public List<WorldObject> generateObjectsForChunk(String worldName, Chunk chunk, long chunkSeed) {
        Random rand = new Random(chunkSeed);
        List<WorldObject> objects = new ArrayList<>();

        for (WorldObject.ObjectType objType : chunk.getBiome().getSpawnableObjects()) {
            double chance = chunk.getBiome().getSpawnChanceForObject(objType);
            if (chance <= 0.0) continue;

            for (int lx = 0; lx < Chunk.CHUNK_SIZE; lx++) {
                for (int ly = 0; ly < Chunk.CHUNK_SIZE; ly++) {
                    int tileType = chunk.getTileType(lx, ly);
                    if (!chunk.getBiome().getAllowedTileTypes().contains(tileType)) {
                        continue;
                    }
                    if (rand.nextDouble() < chance) {
                        int wTileX = chunk.getChunkX() * Chunk.CHUNK_SIZE + lx;
                        int wTileY = chunk.getChunkY() * Chunk.CHUNK_SIZE + ly;
                        WorldObject obj = new WorldObject(wTileX, wTileY, null, objType);
                        obj.setId(UUID.randomUUID().toString());
                        obj.ensureTexture();
                        objects.add(obj);
                    }
                }
            }
        }

        Vector2 chunkPos = new Vector2(chunk.getChunkX(), chunk.getChunkY());
        setObjectsForChunk(worldName, chunkPos, objects);
        return objects;
    }

    public void clearWorld(String worldName) {
        worldObjectsByWorld.remove(worldName);
        GameLogger.info("Cleared all objects for world: " + worldName);
    }

    public List<WorldObject> getObjectsNearPosition(String worldName, float worldX, float worldY, float radius) {
        int chunkX = (int) Math.floor(worldX / (World.CHUNK_SIZE * World.TILE_SIZE));
        int chunkY = (int) Math.floor(worldY / (World.CHUNK_SIZE * World.TILE_SIZE));

        List<WorldObject> nearbyObjects = new ArrayList<>();
        Map<Vector2, List<WorldObject>> worldObjects = worldObjectsByWorld.get(worldName);
        if (worldObjects == null) return nearbyObjects;

        // Check current and adjacent chunks
        for (int dx = -1; dx <= 1; dx++) {
            for (int dy = -1; dy <= 1; dy++) {
                Vector2 chunkPos = new Vector2(chunkX + dx, chunkY + dy);
                List<WorldObject> chunkObjects = worldObjects.get(chunkPos);
                if (chunkObjects != null) {
                    for (WorldObject obj : chunkObjects) {
                        float dx2 = obj.getPixelX() - worldX;
                        float dy2 = obj.getPixelY() - worldY;
                        if (Math.sqrt(dx2 * dx2 + dy2 * dy2) <= radius) {
                            nearbyObjects.add(obj);
                        }
                    }
                }
            }
        }

        return nearbyObjects;
    }

    public void cleanup() {
        worldObjectsByWorld.clear();
        lastChunkAccess.clear();
    }
}

================
File: main/java/org/discord/utils/BiomeData.java
================
package org.discord.utils;

import io.github.pokemeetup.system.gameplay.overworld.biomes.BiomeType;

public class BiomeData {
    private BiomeType primaryBiomeType;
    private BiomeType secondaryBiomeType;
    private float transitionFactor;
    private long generationSeed;
    private long lastModified;

    public BiomeType getPrimaryBiomeType() { return primaryBiomeType; }
    public BiomeType getSecondaryBiomeType() { return secondaryBiomeType; }
    public float getTransitionFactor() { return transitionFactor; }
    public long getGenerationSeed() { return generationSeed; }
    public long getLastModified() { return lastModified; }

    public void setPrimaryBiomeType(BiomeType type) {
        this.primaryBiomeType = type;
        this.lastModified = System.currentTimeMillis();
    }

    public void setSecondaryBiomeType(BiomeType type) {
        this.secondaryBiomeType = type;
        this.lastModified = System.currentTimeMillis();
    }

    public void setTransitionFactor(float factor) {
        this.transitionFactor = factor;
        this.lastModified = System.currentTimeMillis();
    }

    public void setGenerationSeed(long seed) {
        this.generationSeed = seed;
        this.lastModified = System.currentTimeMillis();
    }
}

================
File: main/java/org/discord/utils/ServerBiomeManager.java
================
package org.discord.utils;

import com.badlogic.gdx.math.Vector2;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import io.github.pokemeetup.managers.BiomeManager;
import io.github.pokemeetup.managers.BiomeTransitionResult;
import io.github.pokemeetup.system.gameplay.overworld.Chunk;
import io.github.pokemeetup.system.gameplay.overworld.World;
import io.github.pokemeetup.system.gameplay.overworld.biomes.Biome;
import io.github.pokemeetup.system.gameplay.overworld.biomes.BiomeType;
import io.github.pokemeetup.utils.GameLogger;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class ServerBiomeManager {
    private final Map<String, Map<Vector2, BiomeData>> worldBiomeCache;
    private final BiomeManager biomeManager;
    private final Path baseBiomePath;
    private final Gson gson;
    private static final String BIOME_DATA_DIR = "server/data/biomes";

    public ServerBiomeManager(BiomeManager biomeManager) {
        this.biomeManager = biomeManager;
        this.worldBiomeCache = new ConcurrentHashMap<>();
        this.baseBiomePath = Paths.get(BIOME_DATA_DIR);
        this.gson = new GsonBuilder()
            .setPrettyPrinting()
            .create();

        initializeDirectory();
    }

    private void initializeDirectory() {
        try {
            Files.createDirectories(baseBiomePath);
        } catch (IOException e) {
            GameLogger.error("Failed to create biome data directory: " + e.getMessage());
        }
    }

    public BiomeManager getBiomeManager() {
        return biomeManager;
    }

    public BiomeData getBiomeData(String worldName, Vector2 chunkPos) {
        Map<Vector2, BiomeData> worldBiomes = worldBiomeCache.computeIfAbsent(
            worldName, k -> new ConcurrentHashMap<>()
        );

        BiomeData data = worldBiomes.get(chunkPos);
        if (data != null) {
            return data;
        }

        // Try to load from disk
        data = loadBiomeData(worldName, chunkPos);
        if (data == null) {
            data = generateBiomeData(worldName, chunkPos);
        }

        // Cache and return
        worldBiomes.put(chunkPos, data);
        return data;
    }

    private BiomeData loadBiomeData(String worldName, Vector2 chunkPos) {
        Path biomePath = getBiomeFilePath(worldName, chunkPos);
        try {
            if (Files.exists(biomePath)) {
                String jsonContent = Files.readString(biomePath);
                return gson.fromJson(jsonContent, BiomeData.class);
            }
        } catch (IOException e) {
            GameLogger.error("Failed to load biome data for " + worldName +
                " at " + chunkPos + ": " + e.getMessage());
        }
        return null;
    }

    private BiomeData generateBiomeData(String worldName, Vector2 chunkPos) {
        float worldX = (chunkPos.x * Chunk.CHUNK_SIZE + Chunk.CHUNK_SIZE / 2f) * World.TILE_SIZE;
        float worldY = (chunkPos.y * Chunk.CHUNK_SIZE + Chunk.CHUNK_SIZE / 2f) * World.TILE_SIZE;
BiomeTransitionResult transition = biomeManager.getBiomeAt(worldX, worldY);

        BiomeData data = new BiomeData();
        data.setPrimaryBiomeType(transition.getPrimaryBiome().getType());
        data.setTransitionFactor(transition.getTransitionFactor());

        Biome secondaryBiome = transition.getSecondaryBiome();
        if (secondaryBiome != null) {
            data.setSecondaryBiomeType(secondaryBiome.getType());
        }

        saveBiomeData(worldName, chunkPos, data);
        return data;
    }

    public void saveBiomeData(String worldName, Vector2 chunkPos, BiomeData data) {
        try {
            Path biomePath = getBiomeFilePath(worldName, chunkPos);
            Files.createDirectories(biomePath.getParent());

            String jsonContent = gson.toJson(data);
            Files.writeString(biomePath, jsonContent);

            worldBiomeCache
                .computeIfAbsent(worldName, k -> new ConcurrentHashMap<>())
                .put(chunkPos, data);

            GameLogger.info("Saved biome data for " + worldName + " at " + chunkPos);
        } catch (IOException e) {
            GameLogger.error("Failed to save biome data: " + e.getMessage());
        }
    }

    private Path getBiomeFilePath(String worldName, Vector2 chunkPos) {
        return baseBiomePath.resolve(
            String.format("%s/biome_%d_%d.json",
                worldName, (int)chunkPos.x, (int)chunkPos.y)
        );
    }

    public void clearCache(String worldName) {
        worldBiomeCache.remove(worldName);
    }

    public void clearCache() {
        worldBiomeCache.clear();
    }
}

================
File: main/java/org/discord/utils/ServerWorldManager.java
================
package org.discord.utils;

import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.utils.Json;
import com.badlogic.gdx.utils.JsonWriter;
import io.github.pokemeetup.blocks.PlaceableBlock;
import io.github.pokemeetup.managers.BiomeManager;
import io.github.pokemeetup.managers.BiomeTransitionResult;
import io.github.pokemeetup.system.data.BlockSaveData;
import io.github.pokemeetup.system.data.WorldData;
import io.github.pokemeetup.system.gameplay.overworld.Chunk;
import io.github.pokemeetup.system.gameplay.overworld.WorldObject;
import io.github.pokemeetup.system.gameplay.overworld.biomes.Biome;
import io.github.pokemeetup.system.gameplay.overworld.biomes.BiomeType;
import io.github.pokemeetup.utils.GameLogger;
import io.github.pokemeetup.multiplayer.server.ServerStorageSystem;
import io.github.pokemeetup.utils.OpenSimplex2;
import io.github.pokemeetup.utils.storage.JsonConfig;
import org.discord.context.ServerGameContext;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.concurrent.*;

import static io.github.pokemeetup.CreatureCaptureGame.MULTIPLAYER_WORLD_NAME;

/**
 * Manages loading & saving of worlds and chunks on the server side,
 * including chunk-specific WorldObjects, tile data, and block data.
 */
public class ServerWorldManager {

    private static final long AUTO_SAVE_INTERVAL_MS = 300_000;   // e.g. 5 minutes
    private static final long CHUNK_EVICT_TIMEOUT_MS = 600_000;  // e.g. 10 minutes
    private static ServerWorldManager instance;

    // Biome & storage references
    private final Map<String, BiomeManager> worldBiomeManagers = new ConcurrentHashMap<>();
    private final ServerStorageSystem storageSystem;

    // Worlds & Chunks in memory
    private final Map<String, WorldData> activeWorlds = new ConcurrentHashMap<>();
    private final Map<String, Map<Vector2, TimedChunk>> chunkCache = new ConcurrentHashMap<>();

    // Schedulers
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(2);
    private final ExecutorService loadExecutor = Executors.newFixedThreadPool(4);

    // ------------------------------------------------------------------------------------
    // SINGLETON INIT
    // ------------------------------------------------------------------------------------


    public ServerBiomeManager getServerBiomeManager() {
        return serverBiomeManager;
    }

    private final ServerBiomeManager serverBiomeManager;

    // Update the constructor:

    private final BiomeManager biomeManager;  // Add this field

    // Update constructor:
    private ServerWorldManager(ServerStorageSystem storageSystem) {
        this.storageSystem = storageSystem;
        this.biomeManager = new BiomeManager(System.currentTimeMillis());
        this.serverBiomeManager = new ServerBiomeManager(this.biomeManager);
        initScheduledTasks();
    }

    public static synchronized ServerWorldManager getInstance(ServerStorageSystem storageSystem) {
        if (instance == null) {
            instance = new ServerWorldManager(storageSystem);
        }
        return instance;
    }

    // ------------------------------------------------------------------------------------
    // PERIODIC TASKS
    // ------------------------------------------------------------------------------------

    private static long hashCoordinates(long seed, int x, int y) {
        long hash = seed;
        hash = hash * 31 + x;
        hash = hash * 31 + y;
        return hash;
    }

    // ------------------------------------------------------------------------------------
    // WORLD LOADING & SAVING
    // ------------------------------------------------------------------------------------

    private void initScheduledTasks() {
        // Periodically auto-save worlds & evict idle chunks
        scheduler.scheduleAtFixedRate(() -> {
            try {
                // Save any dirty worlds
                for (WorldData wd : activeWorlds.values()) {
                    if (wd.isDirty()) {
                        saveWorld(wd);
                    }
                }
                // Evict idle chunks
                evictIdleChunks();
            } catch (Exception e) {
                GameLogger.error("Error in scheduled task: " + e.getMessage());
            }
        }, AUTO_SAVE_INTERVAL_MS, AUTO_SAVE_INTERVAL_MS, TimeUnit.MILLISECONDS);
    }

    /**
     * Loads the specified world from disk if not already in memory,
     * and caches it in activeWorlds.
     */
    public synchronized WorldData loadWorld(String worldName) {
        if (activeWorlds.containsKey(worldName)) {
            return activeWorlds.get(worldName);
        }
        WorldData wd = storageSystem.loadWorld(worldName);
        if (wd == null) {
            GameLogger.error("World not found in server storage: " + worldName);
            return null;
        }
        activeWorlds.put(worldName, wd);
        // Create a chunk cache for that world
        chunkCache.put(worldName, new ConcurrentHashMap<>());

        GameLogger.info("Loaded world '" + worldName + "' from server storage.");
        return wd;
    }

    /**
     * Saves high-level WorldData only (not chunk data) to server storage.
     */
    public synchronized void saveWorld(WorldData worldData) {
        if (worldData == null) return;
        try {
            storageSystem.saveWorld(worldData);
            worldData.setDirty(false);
            GameLogger.info("Saved world: " + worldData.getName());
        } catch (Exception e) {
            GameLogger.error("Failed to save world: " + e.getMessage());
        }
    }

    /**
     * Creates a brand-new world, stored under server/data/worlds/<name>/world.json,
     * then caches it in memory.
     */
    public synchronized WorldData createWorld(String worldName, long seed, float treeRate, float pokeRate) {
        if (activeWorlds.containsKey(worldName) || storageSystem.worldExists(worldName)) {
            GameLogger.error("World '" + worldName + "' already exists.");
            return null;
        }
        WorldData wd = new WorldData(worldName);
        WorldData.WorldConfig config = new WorldData.WorldConfig(seed);
        config.setTreeSpawnRate(treeRate);
        config.setPokemonSpawnRate(pokeRate);
        wd.setConfig(config);

        // Save to disk
        saveWorld(wd);

        // Cache in memory
        activeWorlds.put(worldName, wd);
        chunkCache.put(worldName, new ConcurrentHashMap<>());
        return wd;
    }

    // ------------------------------------------------------------------------------------
    // CHUNK LOADING & GENERATION
    // ------------------------------------------------------------------------------------

    private BiomeManager getBiomeManager(String worldName) {
        return worldBiomeManagers.computeIfAbsent(worldName, k -> {
            WorldData wd = activeWorlds.get(k);
            if (wd == null) {
                // fallback if loaded incorrectly
                return new BiomeManager(System.currentTimeMillis());
            }
            return new BiomeManager(wd.getConfig().getSeed());
        });
    }

    /**
     * Loads a chunk from memory if cached, otherwise from disk, otherwise
     * generates a new one if not found on disk.
     */
    public Chunk loadChunk(String worldName, int chunkX, int chunkY) {
        WorldData wd = loadWorld(worldName);
        if (wd == null) return null;

        GameLogger.info("Loading chunk (" + chunkX + "," + chunkY + ") for world: " + worldName);
        Map<Vector2, TimedChunk> worldChunkMap = chunkCache.get(worldName);
        Vector2 pos = new Vector2(chunkX, chunkY);

        TimedChunk timed = worldChunkMap.computeIfAbsent(pos, (p) -> {
            // First try to load from disk
            Chunk loaded = loadChunkFromDisk(worldName, chunkX, chunkY);
            if (loaded == null) {
                // Generate new chunk if not found on disk
                loaded = generateNewChunk(wd, chunkX, chunkY);
                if (loaded != null) {
                    // Check if objects were generated and stored
                    List<WorldObject> objects = wd.getChunkObjects().get(pos);
                    if (objects == null || objects.isEmpty()) {
                        GameLogger.info("No objects found for new chunk, generating...");
                        objects = spawnBiomeObjectsForNewChunk(loaded, loaded.getBiome(), loaded.getGenerationSeed());
                        if (objects != null && !objects.isEmpty()) {
                            GameLogger.info("Generated " + objects.size() + " objects for chunk " + pos);
                            wd.getChunkObjects().put(pos, objects);
                            // Mark chunk as dirty to ensure it gets saved
                            loaded.setDirty(true);
                        } else {
                            GameLogger.info("No objects generated for chunk " + pos);
                        }
                    }
                }
            }
            return new TimedChunk(loaded);
        });

        // Save the chunk if it's newly generated and dirty
        if (timed.chunk.isDirty()) {
            saveChunk(worldName, timed.chunk);
            timed.chunk.setDirty(false);
        }

        // Debug log the chunk's objects
        Vector2 chunkPos = new Vector2(chunkX, chunkY);
        List<WorldObject> objects = wd.getChunkObjects().get(chunkPos);
        if (objects != null) {
            GameLogger.info("Chunk (" + chunkX + "," + chunkY + ") has " + objects.size() + " objects:");
            for (WorldObject obj : objects) {
                GameLogger.info("- " + obj.getType() + " at (" + obj.getTileX() + "," + obj.getTileY() + ")");
            }
        } else {
            GameLogger.info("Chunk (" + chunkX + "," + chunkY + ") has NO objects");
        }

        return timed.chunk;
    }
    private Chunk loadChunkFromDisk(String worldName, int chunkX, int chunkY) {
        Path path = getChunkFilePath(worldName, chunkX, chunkY);

        try {
            if (!storageSystem.getFileSystem().exists(path.toString())) {
                return null;
            }
            String jsonContent = storageSystem.getFileSystem().readString(path.toString());
            if (jsonContent == null || jsonContent.isEmpty()) {
                return null;
            }

            Json json = JsonConfig.getInstance();
            ChunkData cd = json.fromJson(ChunkData.class, jsonContent);

            // Create chunk with biome
            Biome biome = biomeManager.getBiome(cd.biomeType);
            if (biome == null) biome = biomeManager.getBiome(BiomeType.PLAINS);

            Chunk chunk = new Chunk(chunkX, chunkY, biome, cd.generationSeed, biomeManager);
            chunk.setTileData(cd.tileData);

            // Handle blocks
            if (cd.blockData != null) {
                for (BlockSaveData.BlockData bd : cd.blockData) {
                    processBlockData(chunk, bd);
                }
            }

            // Process and store world objects
            Vector2 chunkPos = new Vector2(chunkX, chunkY);
            List<WorldObject> objectList = new ArrayList<>();
            if (cd.worldObjects != null) {
                for (Map<String, Object> objData : cd.worldObjects) {
                    try {
                        WorldObject obj = new WorldObject();
                        obj.updateFromData(objData);
                        obj.ensureTexture();
                        objectList.add(obj);
                    } catch (Exception e) {
                        GameLogger.error("Failed to load object: " + e.getMessage());
                    }
                }
            }

            // Store in ObjectManager
            ServerGameContext.get().getWorldObjectManager()
                .setObjectsForChunk(worldName, chunkPos, objectList);

            return chunk;

        } catch (Exception e) {
            GameLogger.error("Error reading chunk from disk: " + e.getMessage());
            return null;
        }
    }
    /**
     * Generates a new chunk if it doesn’t exist on disk. Basic flow:
     * 1) Determine biome
     * 2) Generate tile data
     * 3) Place default objects
     */
    private void processBlockData(Chunk chunk, BlockSaveData.BlockData blockData) {
        try {
            PlaceableBlock.BlockType blockType = PlaceableBlock.BlockType.fromId(blockData.type);
            if (blockType == null) {
                GameLogger.error("Unknown block type: " + blockData.type);
                return;
            }

            Vector2 pos = new Vector2(blockData.x, blockData.y);
            PlaceableBlock block = new PlaceableBlock(blockType, pos, null, blockData.isFlipped);

            // Handle chest-specific data
            if (blockType == PlaceableBlock.BlockType.CHEST) {
                block.setChestOpen(blockData.isChestOpen);
                if (blockData.chestData != null) {
                    block.setChestData(blockData.chestData);
                    GameLogger.info("Loaded chest at " + pos + " with " +
                        blockData.chestData.items.stream().filter(Objects::nonNull).count() + " items");
                }
            }

            chunk.addBlock(block);
            GameLogger.info("Added block " + blockType + " at position " + pos);

        } catch (Exception e) {
            GameLogger.error("Failed to process block data: " + e.getMessage());
        }
    }

    public Chunk generateNewChunk(WorldData wd, int chunkX, int chunkY) {
        Vector2 chunkPos = new Vector2(chunkX, chunkY);
        BiomeData biomeData = serverBiomeManager.getBiomeData(wd.getName(), chunkPos);

        // Get core biome data
        Biome primaryBiome = serverBiomeManager.getBiomeManager().getBiome(biomeData.getPrimaryBiomeType());
        long chunkSeed = generateChunkSeed(wd.getConfig().getSeed(), chunkX, chunkY);

        // Construct the chunk
        Chunk chunk = new Chunk(chunkX, chunkY, primaryBiome, chunkSeed, serverBiomeManager.getBiomeManager());

        // Generate tile data with consideration for transitions
        int[][] tiles = generateDeterministicTileData(chunk, primaryBiome, chunkSeed);
        if (biomeData.getSecondaryBiomeType() != null) {
            Biome secondaryBiome = serverBiomeManager.getBiomeManager().getBiome(biomeData.getSecondaryBiomeType());
            blendBiomeTiles(tiles, primaryBiome, secondaryBiome, biomeData.getTransitionFactor());
        }
        chunk.setTileData(tiles);

        // Generate and store objects
        List<WorldObject> objects = spawnBiomeObjectsForNewChunk(chunk, primaryBiome, chunkSeed);
        ServerGameContext.get().getWorldObjectManager()
            .setObjectsForChunk(wd.getName(), chunkPos, objects);

        chunk.setDirty(true);
        wd.setDirty(true);

        return chunk;
    }

    private void blendBiomeTiles(int[][] tiles, Biome primary, Biome secondary, float transitionFactor) {
        Random random = new Random();
        for (int x = 0; x < Chunk.CHUNK_SIZE; x++) {
            for (int y = 0; y < Chunk.CHUNK_SIZE; y++) {
                if (random.nextFloat() > transitionFactor) {
                    // Use secondary biome tile distribution
                    tiles[x][y] = pickTileType(random.nextLong(), secondary.getTileDistribution());
                }
            }
        }
    }

    // ------------------------------------------------------------------------------------
    // CHUNK HELPER METHODS
    // ------------------------------------------------------------------------------------

    private Path getChunkFilePath(String worldName, int chunkX, int chunkY) {
        return Paths.get("server", "data", "worlds", worldName, "chunks",
            "chunk_" + chunkX + "_" + chunkY + ".json");
    }

    private long generateChunkSeed(long worldSeed, int chunkX, int chunkY) {
        return hashCoordinates(worldSeed, chunkX, chunkY);
    }

    private BiomeType getChunkBiomeType(float worldX, float worldY, long chunkSeed) {
        double temperature = deterministicNoise(chunkSeed, worldX * 0.05, worldY * 0.05);
        double moisture = deterministicNoise(chunkSeed + 1, worldX * 0.05, worldY * 0.05);
        return mapToBiomeType(temperature, moisture);
    }

    private double deterministicNoise(long seed, double x, double y) {
        int fx = (int) (x * 10000);
        int fy = (int) (y * 10000);
        long noiseSeed = hashCoordinates(seed, fx, fy);
        return OpenSimplex2.noise2_ImproveX(noiseSeed, x, y);
    }

    private BiomeType mapToBiomeType(double temperature, double moisture) {
        // Example logic
        if (temperature < 0.2) {
            return BiomeType.SNOW;
        } else if (temperature > 0.8) {
            if (moisture < 0.3) {
                return BiomeType.DESERT;
            }
            return BiomeType.RAIN_FOREST;
        } else if (temperature > 0.6) {
            if (moisture > 0.6) return BiomeType.FOREST;
        } else if (moisture < 0.3) {
            return BiomeType.PLAINS;
        } else if (moisture > 0.7) {
            return BiomeType.HAUNTED;
        }
        return BiomeType.PLAINS;
    }

    private int[][] generateDeterministicTileData(Chunk chunk, Biome biome, long seed) {
        int[][] tiles = new int[Chunk.CHUNK_SIZE][Chunk.CHUNK_SIZE];
        for (int lx = 0; lx < Chunk.CHUNK_SIZE; lx++) {
            for (int ly = 0; ly < Chunk.CHUNK_SIZE; ly++) {
                long tileSeed = hashCoordinates(seed,
                    chunk.getChunkX() * Chunk.CHUNK_SIZE + lx,
                    chunk.getChunkY() * Chunk.CHUNK_SIZE + ly
                );
                tiles[lx][ly] = pickTileType(tileSeed, biome.getTileDistribution());
            }
        }
        return tiles;
    }

    private int pickTileType(long seed, Map<Integer, Integer> distribution) {
        int total = distribution.values().stream().mapToInt(Integer::intValue).sum();
        int roll = Math.abs((int) (seed % total));
        int sum = 0;

        // sorted iteration for consistency
        List<Map.Entry<Integer, Integer>> sorted = new ArrayList<>(distribution.entrySet());
        sorted.sort(Map.Entry.comparingByKey());

        for (Map.Entry<Integer, Integer> entry : sorted) {
            sum += entry.getValue();
            if (roll < sum) {
                return entry.getKey();
            }
        }
        // fallback
        return sorted.get(0).getKey();
    }

    public List<WorldObject> spawnBiomeObjectsForNewChunk(Chunk chunk, Biome biome, long chunkSeed) {
        List<WorldObject> objects = new ArrayList<>();
        Random rand = new Random(chunkSeed);

        for (WorldObject.ObjectType objType : biome.getSpawnableObjects()) {
            double chance = biome.getSpawnChanceForObject(objType);
            if (chance <= 0.0) continue;

            for (int lx = 0; lx < Chunk.CHUNK_SIZE; lx++) {
                for (int ly = 0; ly < Chunk.CHUNK_SIZE; ly++) {
                    int tileType = chunk.getTileType(lx, ly);
                    if (!biome.getAllowedTileTypes().contains(tileType)) {
                        continue;
                    }
                    if (rand.nextDouble() < chance) {
                        int wTileX = chunk.getChunkX() * Chunk.CHUNK_SIZE + lx;
                        int wTileY = chunk.getChunkY() * Chunk.CHUNK_SIZE + ly;
                        WorldObject obj = new WorldObject(
                            wTileX, wTileY, null, objType
                        );
                        objects.add(obj);
                    }
                }
            }
        }

        return objects;
    }

    // ------------------------------------------------------------------------------------
    // CHUNK SAVING
    // ------------------------------------------------------------------------------------


    public void saveChunk(String worldName, Chunk chunk) {
        if (chunk == null) return;

        Path chunkPath = getChunkFilePath(worldName, chunk.getChunkX(), chunk.getChunkY());
        Vector2 chunkPos = new Vector2(chunk.getChunkX(), chunk.getChunkY());

        try {
            Path chunksDir = chunkPath.getParent();
            if (chunksDir != null) {
                storageSystem.getFileSystem().createDirectory(chunksDir.toString());
            }

            ChunkData cd = new ChunkData();
            cd.chunkX = chunk.getChunkX();
            cd.chunkY = chunk.getChunkY();
            cd.biomeType = chunk.getBiome().getType();
            cd.tileData = chunk.getTileData().clone();
            cd.blockData = new ArrayList<>(chunk.getBlockDataForSave());
            cd.generationSeed = chunk.getGenerationSeed();

            // Get objects from ServerWorldObjectManager
            List<WorldObject> objects = ServerGameContext.get().getWorldObjectManager()
                .getObjectsForChunk(worldName, chunkPos);

            if (objects != null) {
                cd.worldObjects = new ArrayList<>();
                for (WorldObject obj : objects) {
                    if (obj != null) {
                        Map<String, Object> objData = obj.getSerializableData();
                        if (objData != null) {
                            cd.worldObjects.add(objData);
                        }
                    }
                }
            }

            // Serialize and save
            Json json = new Json();
            json.setOutputType(JsonWriter.OutputType.json);
            String jsonData = json.prettyPrint(cd);
            storageSystem.getFileSystem().writeString(chunkPath.toString(), jsonData);

            chunk.setDirty(false);
            Map<Vector2, TimedChunk> worldChunkMap = chunkCache.get(worldName);
            if (worldChunkMap != null) {
                worldChunkMap.put(chunkPos, new TimedChunk(chunk));
            }

        } catch (Exception e) {
            GameLogger.error("Failed to save chunk at " + chunkPos + ": " + e.getMessage());
        }
    }
    // ------------------------------------------------------------------------------------
    // CHUNK EVICTION
    // ------------------------------------------------------------------------------------

    private void evictIdleChunks() {
        long now = System.currentTimeMillis();
        for (Map.Entry<String, Map<Vector2, TimedChunk>> entry : chunkCache.entrySet()) {
            String worldName = entry.getKey();
            Map<Vector2, TimedChunk> chunkMap = entry.getValue();

            Iterator<Map.Entry<Vector2, TimedChunk>> it = chunkMap.entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry<Vector2, TimedChunk> e = it.next();
                TimedChunk container = e.getValue();
                // If chunk is idle for too long, evict it
                if ((now - container.lastAccess) >= CHUNK_EVICT_TIMEOUT_MS) {
                    // Save if dirty
                    if (container.chunk.isDirty()) {
                        saveChunk(worldName, container.chunk);
                    }
                    it.remove();
                    GameLogger.info("Evicted chunk (" + e.getKey().x + "," + e.getKey().y +
                        ") from world '" + worldName + "'");
                }
            }
        }
    }

    // ------------------------------------------------------------------------------------
    // SHUTDOWN
    // ------------------------------------------------------------------------------------

    public void shutdown() {
        GameLogger.info("Shutting down ServerWorldManager...");

        // Save chunks
        for (Map.Entry<String, Map<Vector2, TimedChunk>> entry : chunkCache.entrySet()) {
            String worldName = entry.getKey();
            for (TimedChunk tchunk : entry.getValue().values()) {
                if (tchunk.chunk.isDirty()) {
                    saveChunk(worldName, tchunk.chunk);
                }
            }
        }

        // Save worlds
        for (WorldData wd : activeWorlds.values()) {
            if (wd.isDirty()) {
                saveWorld(wd);
            }
        }

        // Clean up executors
        loadExecutor.shutdown();
        scheduler.shutdown();

        GameLogger.info("ServerWorldManager shutdown complete.");
    }
    // ------------------------------------------------------------------------------------
    // INNER CLASSES
    // ------------------------------------------------------------------------------------

    /**
     * For storing chunk + lastAccess time so we can evict if idle.
     */
    private static class TimedChunk {
        final Chunk chunk;
        long lastAccess;

        TimedChunk(Chunk chunk) {
            this.chunk = chunk;
            this.lastAccess = System.currentTimeMillis();
        }
    }

    /**
     * Represents chunk data in chunk_<x>_<y>.json, including tileData,
     * block data, and a list of serialized world objects.
     */

    public static class ChunkData {
        public int chunkX;
        public int chunkY;
        public BiomeType biomeType;
        public BiomeData biomeData;
        public int[][] tileData;
        public List<BlockSaveData.BlockData> blockData = new ArrayList<>();
        public long generationSeed;
        public List<Map<String, Object>> worldObjects = new ArrayList<>();

        public static ChunkData fromChunk(Chunk chunk) {
            ChunkData cd = new ChunkData();
            cd.chunkX = chunk.getChunkX();
            cd.chunkY = chunk.getChunkY();
            cd.biomeType = chunk.getBiome().getType();
            cd.tileData = chunk.getTileData().clone();
            cd.blockData = new ArrayList<>(chunk.getBlockDataForSave());
            cd.generationSeed = chunk.getGenerationSeed();

            // Get world objects from ServerWorldObjectManager
            Vector2 chunkPos = new Vector2(chunk.getChunkX(), chunk.getChunkY());
            List<WorldObject> objects = ServerGameContext.get()
                .getWorldObjectManager()
                .getObjectsForChunk(MULTIPLAYER_WORLD_NAME, chunkPos);

            if (objects != null) {
                cd.worldObjects = new ArrayList<>();
                for (WorldObject obj : objects) {
                    if (obj != null) {
                        Map<String, Object> objData = obj.getSerializableData();
                        if (objData != null) {
                            cd.worldObjects.add(objData);
                        }
                    }
                }
            }

            return cd;
        }

        public Chunk toChunk() {
            BiomeManager tmpBiomeMgr = new BiomeManager(generationSeed);
            BiomeType type = (biomeData != null) ? biomeData.getPrimaryBiomeType() : biomeType;
            Biome b = tmpBiomeMgr.getBiome(type);

            Chunk chunk = new Chunk(chunkX, chunkY, b, generationSeed, tmpBiomeMgr);
            chunk.setTileData(tileData.clone());

            // Process blocks and objects
            for (BlockSaveData.BlockData bd : blockData) {
                Vector2 pos = new Vector2(bd.x, bd.y);
                PlaceableBlock.BlockType bt = PlaceableBlock.BlockType.fromId(bd.type);
                if (bt != null) {
                    PlaceableBlock block = new PlaceableBlock(bt, pos, null, bd.isFlipped);
                    block.setChestOpen(bd.isChestOpen);
                    block.setChestData(bd.chestData);
                    chunk.addBlock(block);
                }
            }

            // Store biome data
            Vector2 chunkPos = new Vector2(chunkX, chunkY);
            if (biomeData != null && biomeData.getSecondaryBiomeType() != null) {
                BiomeTransitionResult transition = new BiomeTransitionResult(
                    b,
                    tmpBiomeMgr.getBiome(biomeData.getSecondaryBiomeType()),
                    biomeData.getTransitionFactor()
                );

            }

            return chunk;
        }
    }
}
