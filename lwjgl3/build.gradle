// --- Standard buildscript and plugin configuration for desktop
plugins {
  id 'application'
  id 'java'
  id 'distribution'
  // Shadow plugin to create a fat jar.
  id 'com.github.johnrengelman.shadow' version '8.1.1'
  // (Optional) Construo plugin.
  id "io.github.fourlastor.construo" version "1.4.1"
}

// Allow Launch4j types if needed.
System.setProperty("xstream.allowTypesByWildcard", "net.sf.launch4j.**")

group = 'io.github.pokemeetup'
version = '1.0.0'

// Define a variable for the main class.
def mainClassName = 'io.github.pokemeetup.lwjgl3.Lwjgl3Launcher'

repositories {
  mavenCentral()
}

dependencies {
  // --- Desktop client dependencies: include your shared core project.
  implementation project(':core')
  implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:${project.findProperty('gdxVersion') ?: '1.13.0'}"
  implementation "com.badlogicgames.gdx:gdx-box2d-platform:${project.findProperty('gdxVersion') ?: '1.13.0'}:natives-desktop"

  implementation "com.badlogicgames.gdx-controllers:gdx-controllers-desktop:$gdxControllersVersion"


  implementation "com.badlogicgames.gdx:gdx-platform:${project.findProperty('gdxVersion') ?: '1.13.0'}:natives-desktop"
}

application {
  // Use the variable here.
  mainClass = mainClassName
}

java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}
sourceSets {
  main {
    resources {
      // Adjust the source directory path as needed.
      srcDirs = ['../assets']
      exclude 'Textures/**', 'thumbnails/**', 'ui', 'worlds/**'
    }
  }
}

def os = System.properties['os.name'].toLowerCase()
run {
  // For development, set the working directory to the project root
  // so that the "assets" folder is available as "assets/..."
  workingDir = rootProject.projectDir
  setIgnoreExitValue(true)
  if (os.contains('mac')) {
    jvmArgs += "-XstartOnFirstThread"
  }
}

// --- Use the Shadow plugin to create a fat jar.
shadowJar {
  archiveFileName = "${project.name}-${version}-all.jar"
  mergeServiceFiles()
}


// --- Server Build Task (for your maintained server jar)
tasks.register('buildServer', GradleBuild) {
  group = 'build'
  description = 'Builds the server project'
  dir = project(':ServerCore').projectDir
  tasks = ['shadowJar']
}

// --- Task: Create a minimal JRE using jlink.
// We include java.xml along with java.base, java.desktop, and java.logging.
// --- Task: Create a minimal JRE using jlink.
// We now include jdk.unsupported along with java.base, java.desktop, java.logging, and java.xml.
tasks.register('createMinimalJRE', Exec) {
  def jdkPath = "C:/Program Files/Java/jdk-17"  // MODIFY this path as needed.
  doFirst {
    def minimalJREDir = file("${buildDir}/minimalJRE")
    if (minimalJREDir.exists()) {
      logger.lifecycle("Deleting existing minimalJRE directory: ${minimalJREDir}")
      minimalJREDir.deleteDir()
    }
  }
  commandLine "${jdkPath}/bin/jlink",
    "--module-path", "${jdkPath}/jmods",
    "--add-modules", "java.base,java.desktop,java.logging,java.xml,jdk.unsupported",
    "--compress", "2",
    "--strip-debug",
    "--no-header-files",
    "--no-man-pages",
    "--output", "${buildDir}/minimalJRE"
}


// --- Task: Copy the contents of the assets folder for Packr packaging.
tasks.register('copyAssetsForPackr', Copy) {
  group = 'distribution'
  description = 'Copies the contents of the assets folder for inclusion in the Packr distribution'
  from "${rootProject.projectDir}/assets/"
  into "${buildDir}/packr_resources"
  doLast {
    logger.lifecycle("packr_resources contains:")
    fileTree("${buildDir}/packr_resources").visit { fileDetails ->
      logger.lifecycle("  " + fileDetails.relativePath)
    }
  }
}

// --- Task: Run Packr to Package the Client.
tasks.register('runPackr', Exec) {
  dependsOn 'shadowJar', 'createMinimalJRE'
  def packrJar = rootProject.file("tools/packr.jar")
  if (!packrJar.exists()) {
    throw new GradleException("packr.jar not found in tools/; please download it from https://github.com/libgdx/packr/releases")
  }
  doFirst {
    def outputDir = file("${buildDir}/packr")
    if (outputDir.exists()) {
      logger.lifecycle("Deleting existing Packr output directory: ${outputDir}")
      outputDir.deleteDir()
    }
  }
  commandLine "java", "-jar", packrJar,
    "--platform", "windows64",
    "--jdk", "${buildDir}/minimalJRE",
    "--executable", "PokeMeetup",
    "--classpath", file("build/libs/${project.name}-${version}-all.jar").absolutePath,
    "--mainclass", mainClassName,
    "--output", "${buildDir}/packr",
    "--verbose"
  doLast {
    logger.lifecycle("Final Packr output directory contains:")
    fileTree("${buildDir}/packr").visit { fileDetails ->
      logger.lifecycle("  " + fileDetails.relativePath)
    }
  }
}


// --- Fallback Task: Copy assets from packr_resources into the final output folder.
tasks.register('copyFinalAssets', Copy) {
  group = 'distribution'
  description = 'Copies assets from packr_resources into the final output folder'
  from "${buildDir}/packr_resources"
  into "${buildDir}/packr"
}

// --- Task: Package the Desktop Client using Packr.
tasks.register('packClient') {
  group = 'distribution'
  description = 'Packages the desktop client as a portable executable using Packr'
  dependsOn 'shadowJar', 'createMinimalJRE', 'runPackr'
}


// --- Server Deployment Task (for the server jar)
tasks.register('deployServer', Copy) {
  group = 'deployment'
  description = 'Creates a complete server deployment'
  dependsOn tasks.named("buildServer")
  from("${project(':ServerCore').buildDir}/libs/server.jar")
  into("${buildDir}/deploy")
  doLast {
    def deployDir = file("${buildDir}/deploy")
    new File(deployDir, 'start.bat').text = '''@echo off
java -Xms1G -Xmx4G -jar server.jar
pause
'''
    def shFile = new File(deployDir, 'start.sh')
    shFile.text = '''#!/bin/bash
java -Xms1G -Xmx4G -jar server.jar
'''
    shFile.setExecutable(true, false)
    file("${deployDir}/logs").mkdirs()
    file("${deployDir}/plugins").mkdirs()
    file("${deployDir}/worlds").mkdirs()
    file("${deployDir}/config").mkdirs()
    println """
Server deployed to: ${deployDir}
To start the server:
  - Windows: Run start.bat
  - Linux/Mac: Run ./start.sh
"""
  }
}

// --- Combined Distribution Task
tasks.register('distAll', Zip) {
  group = 'distribution'
  description = 'Packages both the desktop client and server deployments into a single ZIP file.'
  dependsOn 'packClient', 'deployServer'
  from("${buildDir}/packr") {
    include "**"
    into 'client'
  }
  from("${buildDir}/deploy") {
    into 'server'
  }
  archiveFileName = "PokeMeetup_All_${version}.zip"
  destinationDirectory = file("${buildDir}/distributions")
}

// --- Optional: Fat JAR Distribution Alternative
tasks.register('distJar', Zip) {
  dependsOn 'shadowJar'
  from(rootProject.file("build/libs/${project.name}-${version}-all.jar"))
  archiveFileName = "${project.name}-${version}_fat.jar.zip"
  destinationDirectory = file("${buildDir}/distributions")
}

if (project.hasProperty('enableGraalNative') && enableGraalNative == 'true') {
  apply from: file("nativeimage.gradle")
}
